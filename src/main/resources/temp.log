D:\ProgramData\software\jdk-11\bin\java.exe -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:51047,suspend=y,server=n -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:C:\Users\jian.jiang\AppData\Local\JetBrains\IntelliJIdea2020.1\captureAgent\debugger-agent.jar -Dfile.encoding=UTF-8 -classpath "E:\code\lego\lego\adicon-lis-test-center\adicon-lis-test-center-boot\target\classes;E:\code\lego\lego\adicon-lis-test-center\adicon-lis-test-center-domain\target\classes;E:\code\lego\lego\adicon-lis-test-center\adicon-lis-test-center-commons\target\classes;E:\code\lego\lego\adicon-lis-parent\adicon-lis-commons\target\classes;D:\repository\org\apache\commons\commons-lang3\3.10\commons-lang3-3.10.jar;D:\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;D:\repository\commons-io\commons-io\2.6\commons-io-2.6.jar;D:\repository\commons-codec\commons-codec\1.14\commons-codec-1.14.jar;D:\repository\org\projectlombok\lombok\1.18.12\lombok-1.18.12.jar;D:\repository\org\springframework\data\spring-data-commons\2.3.2.RELEASE\spring-data-commons-2.3.2.RELEASE.jar;D:\repository\org\dom4j\dom4j\2.1.3\dom4j-2.1.3.jar;D:\repository\io\swagger\swagger-models\1.5.24\swagger-models-1.5.24.jar;D:\repository\io\swagger\swagger-annotations\1.5.24\swagger-annotations-1.5.24.jar;D:\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;D:\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;D:\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;D:\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.1\jackson-annotations-2.11.1.jar;D:\repository\com\fasterxml\uuid\java-uuid-generator\4.0.1\java-uuid-generator-4.0.1.jar;D:\repository\com\aliyun\openservices\ons-client\1.8.0.Final\ons-client-1.8.0.Final.jar;D:\repository\org\aspectj\aspectjrt\1.9.6\aspectjrt-1.9.6.jar;D:\repository\org\aspectj\aspectjweaver\1.9.6\aspectjweaver-1.9.6.jar;D:\repository\com\dingtalk\com.dingtalk.api\1.0.0\com.dingtalk.api-1.0.0.jar;D:\repository\cn\afterturn\easypoi-base\4.1.2\easypoi-base-4.1.2.jar;D:\repository\ognl\ognl\3.2.6\ognl-3.2.6.jar;D:\repository\org\javassist\javassist\3.20.0-GA\javassist-3.20.0-GA.jar;D:\repository\cn\afterturn\easypoi-web\4.1.2\easypoi-web-4.1.2.jar;D:\repository\org\springframework\spring-web\5.2.8.RELEASE\spring-web-5.2.8.RELEASE.jar;D:\repository\org\springframework\spring-webmvc\5.2.8.RELEASE\spring-webmvc-5.2.8.RELEASE.jar;E:\code\lego\lego\adicon-lis-basicdata-center\adicon-lis-basicdata-center-api\target\classes;E:\code\lego\lego\adicon-lis-basicdata-center\adicon-lis-basicdata-center-commons\target\classes;D:\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.37\tomcat-embed-core-9.0.37.jar;D:\repository\org\apache\tomcat\tomcat-annotations-api\9.0.37\tomcat-annotations-api-9.0.37.jar;E:\code\lego\lego\adicon-lis-application-center\adicon-lis-application-center-api\target\classes;E:\code\lego\lego\adicon-lis-application-center\adicon-lis-application-center-commons\target\classes;D:\repository\com\google\code\gson\gson\2.8.6\gson-2.8.6.jar;D:\repository\org\hibernate\hibernate-validator\5.0.2.Final\hibernate-validator-5.0.2.Final.jar;D:\repository\org\jboss\logging\jboss-logging\3.4.1.Final\jboss-logging-3.4.1.Final.jar;D:\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;E:\code\lego\lego\adicon-lis-qc-center\adicon-lis-qc-center-api\target\classes;E:\code\lego\lego\adicon-lis-qc-center\adicon-lis-qc-center-commons\target\classes;E:\code\lego\lego\adicon-lis-audit-center\adicon-lis-audit-center-api\target\classes;E:\code\lego\lego\adicon-lis-audit-center\adicon-lis-audit-center-commons\target\classes;D:\repository\cn\hutool\hutool-all\5.3.9\hutool-all-5.3.9.jar;D:\repository\com\itextpdf\itextpdf\5.4.3\itextpdf-5.4.3.jar;D:\repository\com\itextpdf\itext-pdfa\5.5.11\itext-pdfa-5.5.11.jar;D:\repository\com\itextpdf\itext-asian\5.2.0\itext-asian-5.2.0.jar;D:\repository\net\sf\jasperreports\jasperreports-fonts\6.17.0\jasperreports-fonts-6.17.0.jar;D:\repository\org\apache\pdfbox\pdfbox\2.0.21\pdfbox-2.0.21.jar;D:\repository\org\apache\pdfbox\fontbox\2.0.21\fontbox-2.0.21.jar;D:\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;D:\repository\com\github\pagehelper\pagehelper\5.2.0\pagehelper-5.2.0.jar;D:\repository\com\github\jsqlparser\jsqlparser\3.2\jsqlparser-3.2.jar;D:\repository\com\alibaba\easyexcel\3.0.3\easyexcel-3.0.3.jar;D:\repository\org\apache\poi\poi\4.1.2\poi-4.1.2.jar;D:\repository\com\zaxxer\SparseBitSet\1.2\SparseBitSet-1.2.jar;D:\repository\org\apache\poi\poi-ooxml\4.1.2\poi-ooxml-4.1.2.jar;D:\repository\org\apache\commons\commons-compress\1.19\commons-compress-1.19.jar;D:\repository\com\github\virtuald\curvesapi\1.06\curvesapi-1.06.jar;D:\repository\org\apache\poi\poi-ooxml-schemas\4.1.2\poi-ooxml-schemas-4.1.2.jar;D:\repository\org\apache\xmlbeans\xmlbeans\3.1.0\xmlbeans-3.1.0.jar;D:\repository\org\apache\commons\commons-csv\1.8\commons-csv-1.8.jar;D:\repository\cglib\cglib\3.3.0\cglib-3.3.0.jar;D:\repository\org\ow2\asm\asm\7.1\asm-7.1.jar;D:\repository\org\ehcache\ehcache\3.8.1\ehcache-3.8.1.jar;D:\repository\org\glassfish\jaxb\jaxb-runtime\2.3.3\jaxb-runtime-2.3.3.jar;D:\repository\org\glassfish\jaxb\txw2\2.3.3\txw2-2.3.3.jar;D:\repository\com\sun\istack\istack-commons-runtime\3.0.11\istack-commons-runtime-3.0.11.jar;D:\repository\com\sun\activation\jakarta.activation\1.2.2\jakarta.activation-1.2.2.jar;E:\code\lego\lego\adicon-lis-sample-center\adicon-lis-sample-center-api\target\classes;D:\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-xml\2.11.1\jackson-dataformat-xml-2.11.1.jar;D:\repository\com\fasterxml\jackson\core\jackson-core\2.11.1\jackson-core-2.11.1.jar;D:\repository\com\fasterxml\jackson\core\jackson-databind\2.11.1\jackson-databind-2.11.1.jar;D:\repository\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.11.1\jackson-module-jaxb-annotations-2.11.1.jar;D:\repository\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;D:\repository\com\fasterxml\woodstox\woodstox-core\6.2.1\woodstox-core-6.2.1.jar;E:\code\lego\lego\adicon-lis-sample-center\adicon-lis-sample-center-commons\target\classes;E:\code\lego\lego\adicon-lis-sample-center\adicon-lis-sample-center-repository\target\classes;D:\repository\cn\afterturn\easypoi-annotation\4.1.2\easypoi-annotation-4.1.2.jar;E:\code\lego\lego\adicon-lis-test-center\adicon-lis-test-center-repository\target\classes;E:\code\lego\lego\adicon-lis-test-center\adicon-lis-test-center-api\target\classes;D:\repository\org\springframework\cloud\spring-cloud-openfeign-core\2.2.5.RELEASE\spring-cloud-openfeign-core-2.2.5.RELEASE.jar;D:\repository\org\springframework\cloud\spring-cloud-netflix-ribbon\2.2.5.RELEASE\spring-cloud-netflix-ribbon-2.2.5.RELEASE.jar;D:\repository\org\springframework\cloud\spring-cloud-netflix-archaius\2.2.5.RELEASE\spring-cloud-netflix-archaius-2.2.5.RELEASE.jar;D:\repository\io\github\openfeign\form\feign-form-spring\3.8.0\feign-form-spring-3.8.0.jar;D:\repository\io\github\openfeign\form\feign-form\3.8.0\feign-form-3.8.0.jar;D:\repository\commons-fileupload\commons-fileupload\1.4\commons-fileupload-1.4.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-web\target\classes;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-web-core\target\classes;D:\repository\org\springframework\boot\spring-boot-starter-web\2.3.2.RELEASE\spring-boot-starter-web-2.3.2.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-starter-json\2.3.2.RELEASE\spring-boot-starter-json-2.3.2.RELEASE.jar;D:\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.1\jackson-datatype-jdk8-2.11.1.jar;D:\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.1\jackson-datatype-jsr310-2.11.1.jar;D:\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.1\jackson-module-parameter-names-2.11.1.jar;D:\repository\org\springframework\boot\spring-boot-starter-tomcat\2.3.2.RELEASE\spring-boot-starter-tomcat-2.3.2.RELEASE.jar;D:\repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar;D:\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.37\tomcat-embed-websocket-9.0.37.jar;D:\repository\org\springframework\boot\spring-boot-starter-aop\2.3.2.RELEASE\spring-boot-starter-aop-2.3.2.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-starter-actuator\2.3.2.RELEASE\spring-boot-starter-actuator-2.3.2.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-actuator-autoconfigure\2.3.2.RELEASE\spring-boot-actuator-autoconfigure-2.3.2.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-actuator\2.3.2.RELEASE\spring-boot-actuator-2.3.2.RELEASE.jar;D:\repository\io\micrometer\micrometer-core\1.5.3\micrometer-core-1.5.3.jar;D:\repository\org\hdrhistogram\HdrHistogram\2.1.12\HdrHistogram-2.1.12.jar;D:\repository\org\latencyutils\LatencyUtils\2.0.3\LatencyUtils-2.0.3.jar;D:\repository\org\springframework\boot\spring-boot-starter-log4j2\2.3.2.RELEASE\spring-boot-starter-log4j2-2.3.2.RELEASE.jar;D:\repository\org\apache\logging\log4j\log4j-slf4j-impl\2.17.0\log4j-slf4j-impl-2.17.0.jar;D:\repository\org\apache\logging\log4j\log4j-api\2.17.0\log4j-api-2.17.0.jar;D:\repository\org\apache\logging\log4j\log4j-core\2.17.0\log4j-core-2.17.0.jar;D:\repository\org\apache\logging\log4j\log4j-jul\2.17.0\log4j-jul-2.17.0.jar;D:\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;D:\repository\com\lmax\disruptor\3.4.2\disruptor-3.4.2.jar;D:\repository\com\spring4all\swagger-spring-boot-starter\1.9.1.RELEASE\swagger-spring-boot-starter-1.9.1.RELEASE.jar;D:\repository\io\springfox\springfox-swagger-ui\2.9.2\springfox-swagger-ui-2.9.2.jar;D:\repository\io\springfox\springfox-spring-web\2.9.2\springfox-spring-web-2.9.2.jar;D:\repository\io\springfox\springfox-swagger2\2.9.2\springfox-swagger2-2.9.2.jar;D:\repository\io\springfox\springfox-spi\2.9.2\springfox-spi-2.9.2.jar;D:\repository\io\springfox\springfox-core\2.9.2\springfox-core-2.9.2.jar;D:\repository\io\springfox\springfox-schema\2.9.2\springfox-schema-2.9.2.jar;D:\repository\io\springfox\springfox-swagger-common\2.9.2\springfox-swagger-common-2.9.2.jar;D:\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;D:\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;D:\repository\org\mapstruct\mapstruct\1.2.0.Final\mapstruct-1.2.0.Final.jar;D:\repository\io\springfox\springfox-bean-validators\2.9.2\springfox-bean-validators-2.9.2.jar;D:\repository\com\alibaba\cloud\spring-cloud-starter-alibaba-nacos-discovery\2.2.5.RELEASE\spring-cloud-starter-alibaba-nacos-discovery-2.2.5.RELEASE.jar;D:\repository\com\alibaba\cloud\spring-cloud-alibaba-commons\2.2.5.RELEASE\spring-cloud-alibaba-commons-2.2.5.RELEASE.jar;D:\repository\com\alibaba\nacos\nacos-client\1.4.2\nacos-client-1.4.2.jar;D:\repository\com\alibaba\nacos\nacos-common\1.4.2\nacos-common-1.4.2.jar;D:\repository\org\apache\httpcomponents\httpasyncclient\4.1.4\httpasyncclient-4.1.4.jar;D:\repository\org\apache\httpcomponents\httpcore-nio\4.4.13\httpcore-nio-4.4.13.jar;D:\repository\com\alibaba\nacos\nacos-api\1.4.2\nacos-api-1.4.2.jar;D:\repository\io\prometheus\simpleclient\0.5.0\simpleclient-0.5.0.jar;D:\repository\com\alibaba\spring\spring-context-support\1.0.10\spring-context-support-1.0.10.jar;D:\repository\org\springframework\cloud\spring-cloud-commons\2.2.5.RELEASE\spring-cloud-commons-2.2.5.RELEASE.jar;D:\repository\org\springframework\security\spring-security-crypto\5.3.3.RELEASE\spring-security-crypto-5.3.3.RELEASE.jar;D:\repository\org\springframework\cloud\spring-cloud-context\2.2.5.RELEASE\spring-cloud-context-2.2.5.RELEASE.jar;D:\repository\com\alibaba\cloud\spring-cloud-starter-alibaba-nacos-config\2.2.5.RELEASE\spring-cloud-starter-alibaba-nacos-config-2.2.5.RELEASE.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-openfeign\target\classes;D:\repository\org\springframework\cloud\spring-cloud-starter-openfeign\2.2.5.RELEASE\spring-cloud-starter-openfeign-2.2.5.RELEASE.jar;D:\repository\org\springframework\cloud\spring-cloud-starter\2.2.5.RELEASE\spring-cloud-starter-2.2.5.RELEASE.jar;D:\repository\org\springframework\security\spring-security-rsa\1.0.9.RELEASE\spring-security-rsa-1.0.9.RELEASE.jar;D:\repository\org\bouncycastle\bcpkix-jdk15on\1.64\bcpkix-jdk15on-1.64.jar;D:\repository\io\github\openfeign\feign-core\10.10.1\feign-core-10.10.1.jar;D:\repository\io\github\openfeign\feign-slf4j\10.10.1\feign-slf4j-10.10.1.jar;D:\repository\io\github\openfeign\feign-hystrix\10.10.1\feign-hystrix-10.10.1.jar;D:\repository\com\netflix\archaius\archaius-core\0.7.6\archaius-core-0.7.6.jar;D:\repository\com\netflix\hystrix\hystrix-core\1.5.18\hystrix-core-1.5.18.jar;D:\repository\org\springframework\cloud\spring-cloud-starter-netflix-ribbon\2.2.5.RELEASE\spring-cloud-starter-netflix-ribbon-2.2.5.RELEASE.jar;D:\repository\org\springframework\cloud\spring-cloud-starter-netflix-archaius\2.2.5.RELEASE\spring-cloud-starter-netflix-archaius-2.2.5.RELEASE.jar;D:\repository\commons-configuration\commons-configuration\1.8\commons-configuration-1.8.jar;D:\repository\com\netflix\ribbon\ribbon\2.3.0\ribbon-2.3.0.jar;D:\repository\com\netflix\ribbon\ribbon-transport\2.3.0\ribbon-transport-2.3.0.jar;D:\repository\io\reactivex\rxnetty-contexts\0.4.9\rxnetty-contexts-0.4.9.jar;D:\repository\io\reactivex\rxnetty-servo\0.4.9\rxnetty-servo-0.4.9.jar;D:\repository\io\reactivex\rxnetty\0.4.9\rxnetty-0.4.9.jar;D:\repository\com\netflix\ribbon\ribbon-core\2.3.0\ribbon-core-2.3.0.jar;D:\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;D:\repository\com\netflix\ribbon\ribbon-httpclient\2.3.0\ribbon-httpclient-2.3.0.jar;D:\repository\commons-collections\commons-collections\3.2.2\commons-collections-3.2.2.jar;D:\repository\com\sun\jersey\jersey-client\1.19.1\jersey-client-1.19.1.jar;D:\repository\com\sun\jersey\jersey-core\1.19.1\jersey-core-1.19.1.jar;D:\repository\javax\ws\rs\jsr311-api\1.1.1\jsr311-api-1.1.1.jar;D:\repository\com\sun\jersey\contribs\jersey-apache-client4\1.19.1\jersey-apache-client4-1.19.1.jar;D:\repository\com\netflix\servo\servo-core\0.12.21\servo-core-0.12.21.jar;D:\repository\com\netflix\netflix-commons\netflix-commons-util\0.3.0\netflix-commons-util-0.3.0.jar;D:\repository\com\netflix\ribbon\ribbon-loadbalancer\2.3.0\ribbon-loadbalancer-2.3.0.jar;D:\repository\com\netflix\netflix-commons\netflix-statistics\0.1.1\netflix-statistics-0.1.1.jar;D:\repository\io\reactivex\rxjava\1.3.8\rxjava-1.3.8.jar;D:\repository\io\github\openfeign\feign-okhttp\10.10.1\feign-okhttp-10.10.1.jar;D:\repository\com\squareup\okhttp3\okhttp\3.14.9\okhttp-3.14.9.jar;D:\repository\com\squareup\okio\okio\1.17.2\okio-1.17.2.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-data-redis\target\classes;D:\repository\org\springframework\boot\spring-boot-starter-data-redis\2.3.2.RELEASE\spring-boot-starter-data-redis-2.3.2.RELEASE.jar;D:\repository\org\springframework\data\spring-data-redis\2.3.2.RELEASE\spring-data-redis-2.3.2.RELEASE.jar;D:\repository\org\springframework\data\spring-data-keyvalue\2.3.2.RELEASE\spring-data-keyvalue-2.3.2.RELEASE.jar;D:\repository\org\springframework\spring-oxm\5.2.8.RELEASE\spring-oxm-5.2.8.RELEASE.jar;D:\repository\io\lettuce\lettuce-core\5.3.2.RELEASE\lettuce-core-5.3.2.RELEASE.jar;D:\repository\io\netty\netty-common\4.1.51.Final\netty-common-4.1.51.Final.jar;D:\repository\io\netty\netty-handler\4.1.51.Final\netty-handler-4.1.51.Final.jar;D:\repository\io\netty\netty-resolver\4.1.51.Final\netty-resolver-4.1.51.Final.jar;D:\repository\io\netty\netty-transport\4.1.51.Final\netty-transport-4.1.51.Final.jar;D:\repository\io\projectreactor\reactor-core\3.3.8.RELEASE\reactor-core-3.3.8.RELEASE.jar;D:\repository\org\reactivestreams\reactive-streams\1.0.3\reactive-streams-1.0.3.jar;D:\repository\org\redisson\redisson-spring-boot-starter\3.15.1\redisson-spring-boot-starter-3.15.1.jar;D:\repository\org\redisson\redisson\3.15.1\redisson-3.15.1.jar;D:\repository\io\netty\netty-codec\4.1.51.Final\netty-codec-4.1.51.Final.jar;D:\repository\io\netty\netty-buffer\4.1.51.Final\netty-buffer-4.1.51.Final.jar;D:\repository\io\netty\netty-resolver-dns\4.1.51.Final\netty-resolver-dns-4.1.51.Final.jar;D:\repository\io\netty\netty-codec-dns\4.1.51.Final\netty-codec-dns-4.1.51.Final.jar;D:\repository\javax\cache\cache-api\1.1.1\cache-api-1.1.1.jar;D:\repository\io\reactivex\rxjava3\rxjava\3.0.10\rxjava-3.0.10.jar;D:\repository\org\jboss\marshalling\jboss-marshalling-river\2.0.10.Final\jboss-marshalling-river-2.0.10.Final.jar;D:\repository\org\jboss\marshalling\jboss-marshalling\2.0.10.Final\jboss-marshalling-2.0.10.Final.jar;D:\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.11.1\jackson-dataformat-yaml-2.11.1.jar;D:\repository\org\jodd\jodd-bean\5.1.6\jodd-bean-5.1.6.jar;D:\repository\org\jodd\jodd-core\5.1.6\jodd-core-5.1.6.jar;D:\repository\org\redisson\redisson-spring-data-24\3.15.1\redisson-spring-data-24-3.15.1.jar;D:\repository\org\springframework\boot\spring-boot-starter-cache\2.3.2.RELEASE\spring-boot-starter-cache-2.3.2.RELEASE.jar;D:\repository\org\springframework\spring-context-support\5.2.8.RELEASE\spring-context-support-5.2.8.RELEASE.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-data-mongodb\target\classes;D:\repository\org\springframework\boot\spring-boot-starter-data-mongodb\2.3.2.RELEASE\spring-boot-starter-data-mongodb-2.3.2.RELEASE.jar;D:\repository\org\mongodb\mongodb-driver-sync\4.0.5\mongodb-driver-sync-4.0.5.jar;D:\repository\org\mongodb\bson\4.0.5\bson-4.0.5.jar;D:\repository\org\mongodb\mongodb-driver-core\4.0.5\mongodb-driver-core-4.0.5.jar;D:\repository\org\springframework\data\spring-data-mongodb\3.0.2.RELEASE\spring-data-mongodb-3.0.2.RELEASE.jar;D:\repository\org\springframework\spring-tx\5.2.8.RELEASE\spring-tx-5.2.8.RELEASE.jar;D:\repository\com\querydsl\querydsl-mongodb\4.3.1\querydsl-mongodb-4.3.1.jar;D:\repository\com\querydsl\querydsl-core\4.3.1\querydsl-core-4.3.1.jar;D:\repository\com\mysema\commons\mysema-commons-lang\0.2.4\mysema-commons-lang-0.2.4.jar;D:\repository\com\infradna\tool\bridge-method-annotation\1.13\bridge-method-annotation-1.13.jar;D:\repository\com\querydsl\querydsl-apt\4.3.1\querydsl-apt-4.3.1.jar;D:\repository\com\querydsl\querydsl-codegen\4.3.1\querydsl-codegen-4.3.1.jar;D:\repository\com\mysema\codegen\codegen\0.6.8\codegen-0.6.8.jar;D:\repository\org\eclipse\jdt\core\compiler\ecj\4.3.1\ecj-4.3.1.jar;D:\repository\javax\inject\javax.inject\1\javax.inject-1.jar;D:\repository\org\reflections\reflections\0.9.9\reflections-0.9.9.jar;D:\repository\com\google\code\findbugs\annotations\2.0.1\annotations-2.0.1.jar;D:\repository\com\googlecode\aviator\aviator\5.2.7\aviator-5.2.7.jar;D:\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-oss\target\classes;D:\repository\com\aliyun\oss\aliyun-sdk-oss\3.12.0\aliyun-sdk-oss-3.12.0.jar;D:\repository\org\apache\httpcomponents\httpclient\4.5.12\httpclient-4.5.12.jar;D:\repository\org\apache\httpcomponents\httpcore\4.4.13\httpcore-4.4.13.jar;D:\repository\org\jdom\jdom2\2.0.6\jdom2-2.0.6.jar;D:\repository\org\codehaus\jettison\jettison\1.1\jettison-1.1.jar;D:\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar;D:\repository\com\aliyun\aliyun-java-sdk-core\4.5.20\aliyun-java-sdk-core-4.5.20.jar;D:\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;D:\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;D:\repository\org\jacoco\org.jacoco.agent\0.8.6\org.jacoco.agent-0.8.6-runtime.jar;D:\repository\org\ini4j\ini4j\0.5.4\ini4j-0.5.4.jar;D:\repository\io\opentracing\opentracing-api\0.33.0\opentracing-api-0.33.0.jar;D:\repository\io\opentracing\opentracing-util\0.33.0\opentracing-util-0.33.0.jar;D:\repository\io\opentracing\opentracing-noop\0.33.0\opentracing-noop-0.33.0.jar;D:\repository\com\aliyun\aliyun-java-sdk-ram\3.1.0\aliyun-java-sdk-ram-3.1.0.jar;D:\repository\com\aliyun\aliyun-java-sdk-kms\2.11.0\aliyun-java-sdk-kms-2.11.0.jar;E:\code\lego\lego\adicon-lis-user-center\adicon-lis-user-center-api\target\classes;E:\code\lego\lego\adicon-lis-user-center\adicon-lis-user-center-commons\target\classes;D:\repository\org\hibernate\validator\hibernate-validator\6.1.5.Final\hibernate-validator-6.1.5.Final.jar;D:\repository\jakarta\validation\jakarta.validation-api\2.0.2\jakarta.validation-api-2.0.2.jar;D:\repository\com\alibaba\fastjson\1.2.76\fastjson-1.2.76.jar;D:\repository\org\springframework\security\spring-security-core\5.3.3.RELEASE\spring-security-core-5.3.3.RELEASE.jar;D:\repository\org\springframework\spring-aop\5.2.8.RELEASE\spring-aop-5.2.8.RELEASE.jar;D:\repository\org\springframework\spring-beans\5.2.8.RELEASE\spring-beans-5.2.8.RELEASE.jar;D:\repository\org\springframework\spring-expression\5.2.8.RELEASE\spring-expression-5.2.8.RELEASE.jar;D:\repository\org\bouncycastle\bcprov-jdk15on\1.64\bcprov-jdk15on-1.64.jar;E:\code\lego\lego\adicon-lis-user-center\adicon-lis-user-center-repository\target\classes;D:\repository\org\springframework\boot\spring-boot-devtools\2.3.2.RELEASE\spring-boot-devtools-2.3.2.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot\2.3.2.RELEASE\spring-boot-2.3.2.RELEASE.jar;D:\repository\org\springframework\spring-core\5.2.8.RELEASE\spring-core-5.2.8.RELEASE.jar;D:\repository\org\springframework\spring-jcl\5.2.8.RELEASE\spring-jcl-5.2.8.RELEASE.jar;D:\repository\org\springframework\spring-context\5.2.8.RELEASE\spring-context-5.2.8.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-autoconfigure\2.3.2.RELEASE\spring-boot-autoconfigure-2.3.2.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-starter\2.3.2.RELEASE\spring-boot-starter-2.3.2.RELEASE.jar;D:\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;D:\repository\org\yaml\snakeyaml\1.26\snakeyaml-1.26.jar;D:\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.3\jakarta.xml.bind-api-2.3.3.jar;D:\repository\jakarta\activation\jakarta.activation-api\1.2.2\jakarta.activation-api-1.2.2.jar;D:\repository\net\bytebuddy\byte-buddy\1.10.13\byte-buddy-1.10.13.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-sharding-jdbc\target\classes;D:\repository\org\apache\shardingsphere\sharding-jdbc-spring-boot-starter\4.1.1\sharding-jdbc-spring-boot-starter-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-spring-boot-util\4.1.1\sharding-spring-boot-util-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-core-common\4.1.1\sharding-core-common-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-common\4.1.1\shardingsphere-common-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-spi\4.1.1\shardingsphere-spi-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-binder\4.1.1\shardingsphere-sql-parser-binder-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-core-api\4.1.1\sharding-core-api-4.1.1.jar;D:\repository\org\apache\shardingsphere\encrypt-core-api\4.1.1\encrypt-core-api-4.1.1.jar;D:\repository\org\apache\shardingsphere\encrypt-core-common\4.1.1\encrypt-core-common-4.1.1.jar;D:\repository\org\codehaus\groovy\groovy\2.4.5\groovy-2.4.5-indy.jar;D:\repository\org\apache\shardingsphere\sharding-transaction-spring\4.1.1\sharding-transaction-spring-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-transaction-core\4.1.1\sharding-transaction-core-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-jdbc-core\4.1.1\sharding-jdbc-core-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-pluggable\4.1.1\shardingsphere-pluggable-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-route\4.1.1\shardingsphere-route-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-rewrite-engine\4.1.1\shardingsphere-rewrite-engine-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-executor\4.1.1\shardingsphere-executor-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-merge\4.1.1\shardingsphere-merge-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-sql92\4.1.1\shardingsphere-sql-parser-sql92-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-engine\4.1.1\shardingsphere-sql-parser-engine-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-spi\4.1.1\shardingsphere-sql-parser-spi-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-statement\4.1.1\shardingsphere-sql-parser-statement-4.1.1.jar;D:\repository\org\antlr\antlr4-runtime\4.7.2\antlr4-runtime-4.7.2.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-mysql\4.1.1\shardingsphere-sql-parser-mysql-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-postgresql\4.1.1\shardingsphere-sql-parser-postgresql-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-oracle\4.1.1\shardingsphere-sql-parser-oracle-4.1.1.jar;D:\repository\org\apache\shardingsphere\shardingsphere-sql-parser-sqlserver\4.1.1\shardingsphere-sql-parser-sqlserver-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-core-route\4.1.1\sharding-core-route-4.1.1.jar;D:\repository\org\apache\shardingsphere\master-slave-core-route\4.1.1\master-slave-core-route-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-core-rewrite\4.1.1\sharding-core-rewrite-4.1.1.jar;D:\repository\org\apache\shardingsphere\encrypt-core-rewrite\4.1.1\encrypt-core-rewrite-4.1.1.jar;D:\repository\org\apache\shardingsphere\shadow-core-rewrite\4.1.1\shadow-core-rewrite-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-core-execute\4.1.1\sharding-core-execute-4.1.1.jar;D:\repository\org\apache\shardingsphere\sharding-core-merge\4.1.1\sharding-core-merge-4.1.1.jar;D:\repository\org\apache\shardingsphere\encrypt-core-merge\4.1.1\encrypt-core-merge-4.1.1.jar;D:\repository\com\google\guava\guava\30.1-jre\guava-30.1-jre.jar;D:\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;D:\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;D:\repository\org\checkerframework\checker-qual\3.5.0\checker-qual-3.5.0.jar;D:\repository\com\google\errorprone\error_prone_annotations\2.3.4\error_prone_annotations-2.3.4.jar;D:\repository\com\google\j2objc\j2objc-annotations\1.3\j2objc-annotations-1.3.jar;D:\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;D:\repository\org\slf4j\jcl-over-slf4j\1.7.30\jcl-over-slf4j-1.7.30.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-mybatis\target\classes;D:\repository\org\mybatis\spring\boot\mybatis-spring-boot-starter\2.1.4\mybatis-spring-boot-starter-2.1.4.jar;D:\repository\org\springframework\boot\spring-boot-starter-jdbc\2.3.2.RELEASE\spring-boot-starter-jdbc-2.3.2.RELEASE.jar;D:\repository\com\zaxxer\HikariCP\3.4.5\HikariCP-3.4.5.jar;D:\repository\org\springframework\spring-jdbc\5.2.8.RELEASE\spring-jdbc-5.2.8.RELEASE.jar;D:\repository\org\mybatis\spring\boot\mybatis-spring-boot-autoconfigure\2.1.4\mybatis-spring-boot-autoconfigure-2.1.4.jar;D:\repository\org\mybatis\mybatis\3.5.6\mybatis-3.5.6.jar;D:\repository\org\mybatis\mybatis-spring\2.0.6\mybatis-spring-2.0.6.jar;D:\repository\com\github\pagehelper\pagehelper-spring-boot-starter\1.3.0\pagehelper-spring-boot-starter-1.3.0.jar;D:\repository\com\github\pagehelper\pagehelper-spring-boot-autoconfigure\1.3.0\pagehelper-spring-boot-autoconfigure-1.3.0.jar;D:\repository\tk\mybatis\mapper-spring-boot-starter\2.1.5\mapper-spring-boot-starter-2.1.5.jar;D:\repository\tk\mybatis\mapper-core\1.1.5\mapper-core-1.1.5.jar;D:\repository\javax\persistence\persistence-api\1.0\persistence-api-1.0.jar;D:\repository\tk\mybatis\mapper-base\1.1.5\mapper-base-1.1.5.jar;D:\repository\tk\mybatis\mapper-weekend\1.1.5\mapper-weekend-1.1.5.jar;D:\repository\tk\mybatis\mapper-spring\1.1.5\mapper-spring-1.1.5.jar;D:\repository\tk\mybatis\mapper-extra\1.1.5\mapper-extra-1.1.5.jar;D:\repository\tk\mybatis\mapper-spring-boot-autoconfigure\2.1.5\mapper-spring-boot-autoconfigure-2.1.5.jar;D:\repository\org\postgresql\postgresql\42.2.14\postgresql-42.2.14.jar;D:\repository\mysql\mysql-connector-java\8.0.21\mysql-connector-java-8.0.21.jar;E:\code\lego\lego\adicon-lis-parent\adicon-lis-starter\adicon-lis-starter-commons\target\classes;D:\repository\org\springframework\boot\spring-boot-starter-logging\2.3.2.RELEASE\spring-boot-starter-logging-2.3.2.RELEASE.jar;D:\IntelliJ IDEA\lib\idea_rt.jar" com.adicon.test.TestCenterApplication
Connected to the target VM, address: '127.0.0.1:51047', transport: 'socket'
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.codehaus.groovy.reflection.CachedClass$3$1 (file:/D:/repository/org/codehaus/groovy/groovy/2.4.5/groovy-2.4.5-indy.jar) to method java.lang.Object.finalize()
WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.reflection.CachedClass$3$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
2022-01-07 19:55:38,325 INFO  restartedMain DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable

      _            __   _
     / \          |  ] (_)
    / _ \     .--.| |  __   .---.   .--.   _ .--.
   / ___ \  / /'`\' | [  | / /'`\]/ .'`\ \[ `.-. |
 _/ /   \ \_| \__/  |  | | | \__. | \__. | | | | |
|____| |____|'.__.;__][___]'.___.' '.__.' [___||__]
Spring Boot Version: 2.3.2.RELEASE (v2.3.2.RELEASE)
2022-01-07 19:55:39,867 INFO  restartedMain LocalConfigInfoProcessor LOCAL_SNAPSHOT_PATH:C:\Users\jian.jiang\nacos\config
2022-01-07 19:55:39,933 INFO  restartedMain JvmUtil isMultiInstance:false
2022-01-07 19:55:40,073 WARN  restartedMain NacosPropertySourceBuilder Ignore the empty nacos configuration and get it based on dataId[test-center] & group[DEFAULT_GROUP]
2022-01-07 19:55:40,089 WARN  restartedMain NacosPropertySourceBuilder Ignore the empty nacos configuration and get it based on dataId[test-center.yml] & group[DEFAULT_GROUP]
2022-01-07 19:55:40,105 WARN  restartedMain NacosPropertySourceBuilder Ignore the empty nacos configuration and get it based on dataId[test-center-dev.yml] & group[DEFAULT_GROUP]
2022-01-07 19:55:40,105 INFO  restartedMain PropertySourceBootstrapConfiguration Located property source: [BootstrapPropertySource {name='bootstrapProperties-test-center-dev.yml,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-test-center.yml,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-test-center,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-mongodb.yml,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-oss.yml,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-rocketMQ.yml,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-redis.yml,DEFAULT_GROUP'}, BootstrapPropertySource {name='bootstrapProperties-test-center-datasource.yml,DEFAULT_GROUP'}]
2022-01-07 19:55:40,215 INFO  restartedMain TestCenterApplication The following profiles are active: dev
2022-01-07 19:55:43,953 INFO  restartedMain RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2022-01-07 19:55:43,953 INFO  restartedMain RepositoryConfigurationDelegate Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2022-01-07 19:55:44,406 INFO  restartedMain RepositoryConfigurationExtensionSupport Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.adicon.data.EntityQuerydslRepository. If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository.
2022-01-07 19:55:44,406 INFO  restartedMain RepositoryConfigurationExtensionSupport Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.adicon.data.EntityRepository. If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository.
2022-01-07 19:55:44,406 INFO  restartedMain RepositoryConfigurationDelegate Finished Spring Data repository scanning in 441ms. Found 0 MongoDB repository interfaces.
2022-01-07 19:55:45,547 INFO  restartedMain RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2022-01-07 19:55:45,547 INFO  restartedMain RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2022-01-07 19:55:45,611 INFO  restartedMain RepositoryConfigurationDelegate Finished Spring Data repository scanning in 49ms. Found 0 Redis repository interfaces.
2022-01-07 19:55:45,903 WARN  restartedMain EndpointId Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'abnormalSampleDao' and 'com.adicon.test.dao.AbnormalSampleDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalBloodGroupingDao' and 'com.adicon.test.dao.ClinicalBloodGroupingDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalBloodGroupingLogDao' and 'com.adicon.test.dao.ClinicalBloodGroupingLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalBloodReviewDao' and 'com.adicon.test.dao.ClinicalBloodReviewDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalLogDao' and 'com.adicon.test.dao.ClinicalLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalObDao' and 'com.adicon.test.dao.ClinicalObDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalObLogDao' and 'com.adicon.test.dao.ClinicalObLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalOthersDao' and 'com.adicon.test.dao.ClinicalOthersDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalOthersLogDao' and 'com.adicon.test.dao.ClinicalOthersLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalPissDao' and 'com.adicon.test.dao.ClinicalPissDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalWhiteDao' and 'com.adicon.test.dao.ClinicalWhiteDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'clinicalWhiteLogDao' and 'com.adicon.test.dao.ClinicalWhiteLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'configDao' and 'com.adicon.test.dao.ConfigDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'configDetailDao' and 'com.adicon.test.dao.ConfigDetailDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'deviceItemTestDao' and 'com.adicon.test.dao.DeviceItemTestDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'deviceResultDao' and 'com.adicon.test.dao.DeviceResultDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeDao' and 'com.adicon.test.dao.ElisaComposeDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeProcessDao' and 'com.adicon.test.dao.ElisaComposeProcessDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeQualityDao' and 'com.adicon.test.dao.ElisaComposeQualityDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeReagentDao' and 'com.adicon.test.dao.ElisaComposeReagentDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeRemindDayDao' and 'com.adicon.test.dao.ElisaComposeRemindDayDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeRuleDao' and 'com.adicon.test.dao.ElisaComposeRuleDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaComposeStepDao' and 'com.adicon.test.dao.ElisaComposeStepDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaGoldDao' and 'com.adicon.test.dao.ElisaGoldDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaHivDao' and 'com.adicon.test.dao.ElisaHivDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaMonitorDao' and 'com.adicon.test.dao.ElisaMonitorDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaPicDao' and 'com.adicon.test.dao.ElisaPicDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaTestResultDao' and 'com.adicon.test.dao.ElisaTestResultDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaTestResultDensitySetDao' and 'com.adicon.test.dao.ElisaTestResultDensitySetDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaTestResultDetailDao' and 'com.adicon.test.dao.ElisaTestResultDetailDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'elisaTestResultReportQualityDao' and 'com.adicon.test.dao.ElisaTestResultReportQualityDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'entrustPrintLogDao' and 'com.adicon.test.dao.EntrustPrintLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'entrustResultReceiveTypeDao' and 'com.adicon.test.dao.EntrustResultReceiveTypeDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'entrustUploadLogDao' and 'com.adicon.test.dao.EntrustUploadLogDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'itemConditionConfigDao' and 'com.adicon.test.dao.ItemConditionConfigDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'pcrLayoutDao' and 'com.adicon.test.dao.PcrLayoutDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'qualityControlSampleNumberDao' and 'com.adicon.test.dao.QualityControlSampleNumberDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'RNADetectMapper' and 'com.adicon.test.dao.RNADetectMapper' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'rejectDelayRecordDao' and 'com.adicon.test.dao.RejectDelayRecordDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testPatientInfoRecordDao' and 'com.adicon.test.dao.TestPatientInfoRecordDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testPreviewDao' and 'com.adicon.test.dao.TestPreviewDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testReportPrintDao' and 'com.adicon.test.dao.TestReportPrintDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testResultDao' and 'com.adicon.test.dao.TestResultDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testResultRecordDao' and 'com.adicon.test.dao.TestResultRecordDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testTaskDao' and 'com.adicon.test.dao.TestTaskDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner Skipping MapperFactoryBean with name 'testTaskProcessRecordDao' and 'com.adicon.test.dao.TestTaskProcessRecordDao' mapperInterface. Bean already defined with the same name!
2022-01-07 19:55:46,207 WARN  restartedMain ClassPathMapperScanner No MyBatis mapper was found in '[com.adicon.test]' package. Please check your configuration.
2022-01-07 19:55:46,495 INFO  restartedMain GenericScope BeanFactory id=772e502d-3c21-344f-8546-d0ab09fe1cd5
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.BasicDataApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.ComboApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.DataReceptionLogApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.DepartmentApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.DictApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.InstrumentApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.InstrumentCommControllerApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.ItemChannelNoApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.ItemListApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,690 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.ItemReferenceApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.LabGroupApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.LisItemAuditApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.LisItemScopeApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.LisItemUniformApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.OrganizationApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.PartnerApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.PartnerSpecialApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.PserialRuleApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,705 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.ResultClueApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.basicdata.api.SysParamApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.audit.api.AutoAuditApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.audit.api.ReportDownloadDetailRecordApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.audit.api.ReportExporterApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.audit.api.ReportQueryApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.user.api.UserApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.job.api.ItemInfoApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.job.api.QcApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.job.api.QcResultRecordPushApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,721 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.application.api.ApplicationApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.application.api.ApplicationCenterApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.application.api.ApplicationSampleApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.application.api.OMSApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.EntrustSampleApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.HandoverSheetApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.InstrumentSortingDetailsApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.SampleMonitorApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.SampleStatusApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.TimeRuleApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,736 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.sample.api.VirtualSortingApi' of type [org.springframework.cloud.openfeign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:46,941 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,081 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.shardingsphere.sharding-org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,097 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.shardingsphere.masterslave-org.apache.shardingsphere.shardingjdbc.spring.boot.masterslave.SpringBootMasterSlaveRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.masterslave.SpringBootMasterSlaveRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,097 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.shardingsphere.encrypt-org.apache.shardingsphere.shardingjdbc.spring.boot.encrypt.SpringBootEncryptRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.encrypt.SpringBootEncryptRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,113 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.shardingsphere.shadow-org.apache.shardingsphere.shardingjdbc.spring.boot.shadow.SpringBootShadowRuleConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.shadow.SpringBootShadowRuleConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,113 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.shardingsphere-org.apache.shardingsphere.shardingjdbc.spring.boot.common.SpringBootPropertiesConfigurationProperties' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.common.SpringBootPropertiesConfigurationProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,611 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration' of type [org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration$$EnhancerBySpringCGLIB$$70373e3a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:47,673 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0' of type [org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:48,540 INFO  restartedMain PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.adicon.autoconfigure.ErrorMessageSourceAutoConfiguration' of type [com.adicon.autoconfigure.ErrorMessageSourceAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-01-07 19:55:49,953 INFO  restartedMain TomcatWebServer Tomcat initialized with port(s): 9301 (http)
2022-01-07 19:55:49,985 INFO  restartedMain Http11NioProtocol Initializing ProtocolHandler ["http-nio-9301"]
2022-01-07 19:55:49,985 INFO  restartedMain StandardService Starting service [Tomcat]
2022-01-07 19:55:49,985 INFO  restartedMain StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.37]
2022-01-07 19:55:50,158 INFO  restartedMain [/] Initializing Spring embedded WebApplicationContext
2022-01-07 19:55:50,158 INFO  restartedMain ServletWebServerApplicationContext Root WebApplicationContext: initialization completed in 9896 ms
2022-01-07 19:55:51,025 INFO  restartedMain WebAutoConfiguration test
2022-01-07 19:55:51,107 INFO  restartedMain ResponseHeaderInjectionFilter 默认设置的headers:{connection=close}
2022-01-07 19:55:53,499 INFO  restartedMain HikariDataSource HikariPool-1 - Starting...
2022-01-07 19:55:53,865 INFO  restartedMain HikariDataSource HikariPool-1 - Start completed.
2022-01-07 19:55:54,005 INFO  restartedMain ConfigurationLogger ShardingRuleConfiguration:
bindingTables:
- t_test_result,t_test_result_record,t_test_task, t_test_task_process_record,t_test_patient_info_record,t_quality_control_sample_number,
  t_test_report_print_record,t_device_result,t_device_item_test,t_config, t_config_detail,t_test_reject_delay_record,
  t_elisa_compose, t_elisa_compose_rule, t_elisa_compose_process, t_elisa_compose_quality,
  t_elisa_compose_reagent, t_elisa_compose_step, t_test_abnormal_sample, t_elisa_test_result,
  t_elisa_test_result_detail, t_elisa_monitor, t_elisa_hiv, t_elisa_pic, t_elisa_syphilis,
  t_elisa_test_result_density_set, t_elisa_compose_remind_day, t_elisa_test_result_report_quality,t_item_condition_config,t_clinical_blood_grouping,t_clinical_blood_review,t_clinical_log,t_clinical_ob,t_clinical_white,t_pcr_layout,t_clinical_piss,t_clinical_others
defaultDataSourceName: test-center
tables:
  t_test_result:
    actualDataNodes: test-center.t_test_result_${1000..9999}
    logicTable: t_test_result
    tableStrategy:
      inline:
        algorithmExpression: t_test_result_${ org_code }
        shardingColumn: org_code
  t_test_result_record:
    actualDataNodes: test-center.t_test_result_record_${1000..9999}
    logicTable: t_test_result_record
    tableStrategy:
      inline:
        algorithmExpression: t_test_result_record_${ org_code }
        shardingColumn: org_code
  t_test_task:
    actualDataNodes: test-center.t_test_task_${1000..9999}
    logicTable: t_test_task
    tableStrategy:
      inline:
        algorithmExpression: t_test_task_${ org_code }
        shardingColumn: org_code
  t_test_task_process_record:
    actualDataNodes: test-center.t_test_task_process_record_${1000..9999}
    logicTable: t_test_task_process_record
    tableStrategy:
      inline:
        algorithmExpression: t_test_task_process_record_${ org_code }
        shardingColumn: org_code
  t_test_patient_info_record:
    actualDataNodes: test-center.t_test_patient_info_record_${1000..9999}
    logicTable: t_test_patient_info_record
    tableStrategy:
      inline:
        algorithmExpression: t_test_patient_info_record_${ org_code }
        shardingColumn: org_code
  t_quality_control_sample_number:
    actualDataNodes: test-center.t_quality_control_sample_number_${1000..9999}
    logicTable: t_quality_control_sample_number
    tableStrategy:
      inline:
        algorithmExpression: t_quality_control_sample_number_${ org_code }
        shardingColumn: org_code
  t_test_report_print_record:
    actualDataNodes: test-center.t_test_report_print_record_${1000..9999}
    logicTable: t_test_report_print_record
    tableStrategy:
      inline:
        algorithmExpression: t_test_report_print_record_${ org_code }
        shardingColumn: org_code
  t_device_result:
    actualDataNodes: test-center.t_device_result_${1000..9999}
    logicTable: t_device_result
    tableStrategy:
      inline:
        algorithmExpression: t_device_result_${ org_code }
        shardingColumn: org_code
  t_device_item_test:
    actualDataNodes: test-center.t_device_item_test_${1000..9999}
    logicTable: t_device_item_test
    tableStrategy:
      inline:
        algorithmExpression: t_device_item_test_${ org_code }
        shardingColumn: org_code
  t_config:
    actualDataNodes: test-center.t_config_${1000..9999}
    logicTable: t_config
    tableStrategy:
      inline:
        algorithmExpression: t_config_${ org_code }
        shardingColumn: org_code
  t_config_detail:
    actualDataNodes: test-center.t_config_detail_${1000..9999}
    logicTable: t_config_detail
    tableStrategy:
      inline:
        algorithmExpression: t_config_detail_${ org_code }
        shardingColumn: org_code
  t_test_reject_delay_record:
    actualDataNodes: test-center.t_test_reject_delay_record_${1000..9999}
    logicTable: t_test_reject_delay_record
    tableStrategy:
      inline:
        algorithmExpression: t_test_reject_delay_record_${ org_code }
        shardingColumn: org_code
  t_elisa_compose:
    actualDataNodes: test-center.t_elisa_compose_${1000..9999}
    logicTable: t_elisa_compose
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_${ org_code }
        shardingColumn: org_code
  t_elisa_compose_rule:
    actualDataNodes: test-center.t_elisa_compose_rule_${1000..9999}
    logicTable: t_elisa_compose_rule
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_rule_${ org_code }
        shardingColumn: org_code
  t_elisa_compose_process:
    actualDataNodes: test-center.t_elisa_compose_process_${1000..9999}
    logicTable: t_elisa_compose_process
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_process_${ org_code }
        shardingColumn: org_code
  t_elisa_compose_quality:
    actualDataNodes: test-center.t_elisa_compose_quality_${1000..9999}
    logicTable: t_elisa_compose_quality
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_quality_${ org_code }
        shardingColumn: org_code
  t_elisa_compose_reagent:
    actualDataNodes: test-center.t_elisa_compose_reagent_${1000..9999}
    logicTable: t_elisa_compose_reagent
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_reagent_${ org_code }
        shardingColumn: org_code
  t_elisa_compose_step:
    actualDataNodes: test-center.t_elisa_compose_step_${1000..9999}
    logicTable: t_elisa_compose_step
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_step_${ org_code }
        shardingColumn: org_code
  t_test_abnormal_sample:
    actualDataNodes: test-center.t_test_abnormal_sample_${1000..9999}
    logicTable: t_test_abnormal_sample
    tableStrategy:
      inline:
        algorithmExpression: t_test_abnormal_sample_${ org_code }
        shardingColumn: org_code
  t_elisa_test_result:
    actualDataNodes: test-center.t_elisa_test_result_${1000..9999}
    logicTable: t_elisa_test_result
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_test_result_${ org_code }
        shardingColumn: org_code
  t_elisa_test_result_detail:
    actualDataNodes: test-center.t_elisa_test_result_detail_${1000..9999}
    logicTable: t_elisa_test_result_detail
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_test_result_detail_${ org_code }
        shardingColumn: org_code
  t_elisa_monitor:
    actualDataNodes: test-center.t_elisa_monitor_${1000..9999}
    logicTable: t_elisa_monitor
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_monitor_${ org_code }
        shardingColumn: org_code
  t_elisa_hiv:
    actualDataNodes: test-center.t_elisa_hiv_${1000..9999}
    logicTable: t_elisa_hiv
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_hiv_${ org_code }
        shardingColumn: org_code
  t_elisa_pic:
    actualDataNodes: test-center.t_elisa_pic_${1000..9999}
    logicTable: t_elisa_pic
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_pic_${ org_code }
        shardingColumn: org_code
  t_elisa_syphilis:
    actualDataNodes: test-center.t_elisa_syphilis_${1000..9999}
    logicTable: t_elisa_syphilis
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_syphilis_${ org_code }
        shardingColumn: org_code
  t_elisa_test_result_density_set:
    actualDataNodes: test-center.t_elisa_test_result_density_set_${1000..9999}
    logicTable: t_elisa_test_result_density_set
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_test_result_density_set_${ org_code }
        shardingColumn: org_code
  t_elisa_compose_remind_day:
    actualDataNodes: test-center.t_elisa_compose_remind_day_${1000..9999}
    logicTable: t_elisa_compose_remind_day
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_compose_remind_day_${ org_code }
        shardingColumn: org_code
  t_elisa_test_result_report_quality:
    actualDataNodes: test-center.t_elisa_test_result_report_quality_${1000..9999}
    logicTable: t_elisa_test_result_report_quality
    tableStrategy:
      inline:
        algorithmExpression: t_elisa_test_result_report_quality_${ org_code }
        shardingColumn: org_code
  t_item_condition_config:
    actualDataNodes: test-center.t_item_condition_config_${1000..9999}
    logicTable: t_item_condition_config
    tableStrategy:
      inline:
        algorithmExpression: t_item_condition_config_${org_code}
        shardingColumn: org_code
  t_clinical_blood_grouping:
    actualDataNodes: test-center.t_clinical_blood_grouping_${1000..9999}
    logicTable: t_clinical_blood_grouping
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_blood_grouping_${org_code}
        shardingColumn: org_code
  t_clinical_blood_review:
    actualDataNodes: test-center.t_clinical_blood_review_${1000..9999}
    logicTable: t_clinical_blood_review
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_blood_review_${org_code}
        shardingColumn: org_code
  t_clinical_log:
    actualDataNodes: test-center.t_clinical_log_${1000..9999}
    logicTable: t_clinical_log
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_log_${org_code}
        shardingColumn: org_code
  t_clinical_ob:
    actualDataNodes: test-center.t_clinical_ob_${1000..9999}
    logicTable: t_clinical_ob
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_ob_${org_code}
        shardingColumn: org_code
  t_clinical_white:
    actualDataNodes: test-center.t_clinical_white_${1000..9999}
    logicTable: t_clinical_white
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_white_${org_code}
        shardingColumn: org_code
  t_pcr_layout:
    actualDataNodes: test-center.t_pcr_layout_${1000..9999}
    logicTable: t_pcr_layout
    tableStrategy:
      inline:
        algorithmExpression: t_pcr_layout_${org_code}
        shardingColumn: org_code
  t_clinical_piss:
    actualDataNodes: test-center.t_clinical_piss_${1000..9999}
    logicTable: t_clinical_piss
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_piss_${org_code}
        shardingColumn: org_code
  t_clinical_others:
    actualDataNodes: test-center.t_clinical_others_${1000..9999}
    logicTable: t_clinical_others
    tableStrategy:
      inline:
        algorithmExpression: t_clinical_others_${org_code}
        shardingColumn: org_code

2022-01-07 19:55:54,005 INFO  restartedMain ConfigurationLogger Properties:
sql.show: 'true'

2022-01-07 19:55:54,046 INFO  restartedMain ShardingSphere-metadata Loading 37 logic tables' meta data.
2022-01-07 19:55:55,094 INFO  restartedMain ShardingSphere-metadata Loading 92 tables' meta data.
2022-01-07 19:56:01,566 INFO  restartedMain ShardingSphere-metadata Meta data load finished, cost 7561 milliseconds.
2022-01-07 19:56:03,982 INFO  restartedMain Version Redisson 3.15.1
2022-01-07 19:56:04,965 INFO  redisson-netty-2-23 MasterPubSubConnectionPool 1 connections initialized for /10.0.11.125:6616
2022-01-07 19:56:05,029 INFO  redisson-netty-2-19 MasterConnectionPool 24 connections initialized for /10.0.11.125:6616
2022-01-07 19:56:05,860 INFO  restartedMain naming initializer namespace from System Property :null
2022-01-07 19:56:05,860 INFO  restartedMain naming initializer namespace from System Environment :null
2022-01-07 19:56:05,861 INFO  restartedMain naming initializer namespace from System Property :null
2022-01-07 19:56:06,380 INFO  restartedMain cluster Cluster created with settings {hosts=[10.0.11.57:27018, 10.0.11.58:27019, 10.0.11.59:27020], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2022-01-07 19:56:06,380 INFO  restartedMain cluster Adding discovered server 10.0.11.57:27018 to client view of cluster
2022-01-07 19:56:06,435 INFO  restartedMain cluster Adding discovered server 10.0.11.58:27019 to client view of cluster
2022-01-07 19:56:06,435 INFO  restartedMain cluster Adding discovered server 10.0.11.59:27020 to client view of cluster
2022-01-07 19:56:06,498 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.59:27020 connection Opened connection [connectionId{localValue:3, serverValue:13035}] to 10.0.11.59:27020
2022-01-07 19:56:06,498 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.58:27019 connection Opened connection [connectionId{localValue:1, serverValue:21980}] to 10.0.11.58:27019
2022-01-07 19:56:06,498 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.57:27018 connection Opened connection [connectionId{localValue:2, serverValue:29125}] to 10.0.11.57:27018
2022-01-07 19:56:06,513 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.59:27020 cluster Monitor thread successfully connected to server with description ServerDescription{address=10.0.11.59:27020, type=REPLICA_SET_ARBITER, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=17716700, setName='rsmongo', canonicalAddress=10.0.11.59:27020, hosts=[10.0.11.57:27018, 10.0.11.58:27019], passives=[], arbiters=[10.0.11.59:27020], primary='10.0.11.57:27018', tagSet=TagSet{[]}, electionId=null, setVersion=4, lastWriteDate=Fri Jan 07 19:55:56 JST 2022, lastUpdateTimeNanos=5839779066300}
2022-01-07 19:56:06,513 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.57:27018 cluster Monitor thread successfully connected to server with description ServerDescription{address=10.0.11.57:27018, type=REPLICA_SET_PRIMARY, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=16501700, setName='rsmongo', canonicalAddress=10.0.11.57:27018, hosts=[10.0.11.57:27018, 10.0.11.58:27019], passives=[], arbiters=[10.0.11.59:27020], primary='10.0.11.57:27018', tagSet=TagSet{[]}, electionId=7fffffff0000000000000003, setVersion=4, lastWriteDate=Fri Jan 07 19:56:06 JST 2022, lastUpdateTimeNanos=5839778363800}
2022-01-07 19:56:06,513 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.58:27019 cluster Monitor thread successfully connected to server with description ServerDescription{address=10.0.11.58:27019, type=REPLICA_SET_SECONDARY, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=16094800, setName='rsmongo', canonicalAddress=10.0.11.58:27019, hosts=[10.0.11.57:27018, 10.0.11.58:27019], passives=[], arbiters=[10.0.11.59:27020], primary='10.0.11.57:27018', tagSet=TagSet{[]}, electionId=null, setVersion=4, lastWriteDate=Fri Jan 07 19:56:06 JST 2022, lastUpdateTimeNanos=5839778362900}
2022-01-07 19:56:06,529 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.57:27018 cluster Discovered cluster type of REPLICA_SET
2022-01-07 19:56:06,529 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.57:27018 cluster Setting max election id to 7fffffff0000000000000003 from replica set primary 10.0.11.57:27018
2022-01-07 19:56:06,529 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.57:27018 cluster Setting max set version to 4 from replica set primary 10.0.11.57:27018
2022-01-07 19:56:06,529 INFO  cluster-ClusterId{value='61d81c46a5bb10685dba41d9', description='null'}-10.0.11.57:27018 cluster Discovered replica set primary 10.0.11.57:27018
2022-01-07 19:56:07,044 INFO  restartedMain OptionalLiveReloadServer LiveReload server is running on port 35729
2022-01-07 19:56:07,544 INFO  restartedMain connection Opened connection [connectionId{localValue:4, serverValue:29126}] to 10.0.11.57:27018
2022-01-07 19:56:08,617 INFO  restartedMain EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2022-01-07 19:56:09,149 INFO  restartedMain JsonMapper 未使用Hibernate
2022-01-07 19:56:09,149 INFO  restartedMain JsonMapper 未使用Hibernate
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging uri:null
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging processor:ProducerBean com.adicon.test.mq.client.ProducerClient.buildProducer()
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging operator:ANONYMOUS
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging header:
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging token:null
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging queryString:
2022-01-07 19:56:09,149 INFO  restartedMain FeignClientLogging queryBody:
2022-01-07 19:56:09,197 INFO  restartedMain FeignClientLogging response:com.aliyun.openservices.ons.api.bean.ProducerBean@c2e9cba
2022-01-07 19:56:09,197 INFO  restartedMain FeignClientLogging cost:16ms
2022-01-07 19:56:10,465 WARN  restartedMain URLConfigurationSource No URLs will be polled as dynamic configuration sources.
2022-01-07 19:56:10,465 INFO  restartedMain URLConfigurationSource To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2022-01-07 19:56:10,481 WARN  restartedMain URLConfigurationSource No URLs will be polled as dynamic configuration sources.
2022-01-07 19:56:10,481 INFO  restartedMain URLConfigurationSource To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2022-01-07 19:56:11,234 INFO  restartedMain JsonMapper 未使用Hibernate
2022-01-07 19:56:11,376 INFO  restartedMain WebMvcConfiguration 修改HttpMessageConverter：7.class org.springframework.http.converter.json.MappingJackson2HttpMessageConverter -> class com.adicon.web.JsonMessageConverter
2022-01-07 19:56:11,465 INFO  restartedMain ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2022-01-07 19:56:11,997 INFO  restartedMain PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2022-01-07 19:56:14,384 INFO  restartedMain ShardingDataSourceMetricsAutoConfiguration MeterRegistry: Shardingsphere-jdbc DataSource注册
2022-01-07 19:56:14,520 INFO  restartedMain ThreadPoolTaskScheduler Initializing ExecutorService 'taskScheduler'
2022-01-07 19:56:14,735 INFO  restartedMain MapperCacheDisabler Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2022-01-07 19:56:14,735 INFO  restartedMain MapperCacheDisabler Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2022-01-07 19:56:14,735 INFO  restartedMain MapperCacheDisabler Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2022-01-07 19:56:14,735 INFO  restartedMain MapperCacheDisabler Clear EntityHelper entityTableMap cache.
2022-01-07 19:56:23,413 INFO  restartedMain Http11NioProtocol Starting ProtocolHandler ["http-nio-9301"]
2022-01-07 19:56:23,444 INFO  restartedMain TomcatWebServer Tomcat started on port(s): 9301 (http) with context path ''
2022-01-07 19:56:23,461 INFO  restartedMain naming [BEAT] adding beat: BeatInfo{port=9301, ip='192.168.50.112', weight=1.0, serviceName='DEFAULT_GROUP@@test-center', cluster='DEFAULT', metadata={preserved.register.source=SPRING_CLOUD}, scheduled=false, period=5000, stopped=false} to beat map.
2022-01-07 19:56:23,461 INFO  restartedMain naming [REGISTER-SERVICE] jianjiang registering service DEFAULT_GROUP@@test-center with instance: Instance{instanceId='null', ip='192.168.50.112', port=9301, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName='DEFAULT', serviceName='null', metadata={preserved.register.source=SPRING_CLOUD}}
2022-01-07 19:56:23,477 INFO  restartedMain NacosServiceRegistry nacos registry, DEFAULT_GROUP test-center 192.168.50.112:9301 register finished
2022-01-07 19:56:23,684 INFO  restartedMain DocumentationPluginsBootstrapper Context refreshed
2022-01-07 19:56:23,715 INFO  restartedMain DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2022-01-07 19:56:23,782 INFO  restartedMain ApiListingReferenceScanner Scanning for api listing references
2022-01-07 19:56:24,133 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_1
2022-01-07 19:56:24,165 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_2
2022-01-07 19:56:24,166 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_1
2022-01-07 19:56:24,182 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_3
2022-01-07 19:56:24,182 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_2
2022-01-07 19:56:24,198 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_4
2022-01-07 19:56:24,198 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_3
2022-01-07 19:56:24,198 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchUpdateUsingPOST_1
2022-01-07 19:56:24,198 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: cancelSignUsingGET_1
2022-01-07 19:56:24,213 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_5
2022-01-07 19:56:24,213 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_6
2022-01-07 19:56:24,229 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_4
2022-01-07 19:56:24,229 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchUpdateUsingPOST_2
2022-01-07 19:56:24,229 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: cancelSignUsingGET_2
2022-01-07 19:56:24,229 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_7
2022-01-07 19:56:24,344 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getListUsingGET_1
2022-01-07 19:56:24,359 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: deleteUsingPOST_1
2022-01-07 19:56:24,375 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getListUsingGET_2
2022-01-07 19:56:24,391 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getListUsingGET_3
2022-01-07 19:56:24,391 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: deleteUsingPOST_2
2022-01-07 19:56:24,406 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getListUsingGET_4
2022-01-07 19:56:24,422 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveListUsingPOST_1
2022-01-07 19:56:24,422 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getListUsingGET_5
2022-01-07 19:56:24,422 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getRemindListUsingGET_1
2022-01-07 19:56:24,437 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveListUsingPOST_2
2022-01-07 19:56:24,437 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: deleteListUsingPOST_1
2022-01-07 19:56:24,443 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: getListUsingGET_6
2022-01-07 19:56:24,443 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveListUsingPOST_3
2022-01-07 19:56:24,443 INFO  com.alibaba.nacos.client.naming.updater naming new ips(1) service: DEFAULT_GROUP@@test-center@@DEFAULT -> [{"instanceId":"192.168.50.112#9301#DEFAULT#DEFAULT_GROUP@@test-center","ip":"192.168.50.112","port":9301,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@test-center","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatTimeOut":15000,"instanceHeartBeatInterval":5000}]
2022-01-07 19:56:24,443 INFO  com.alibaba.nacos.client.naming.updater naming current ips:(1) service: DEFAULT_GROUP@@test-center@@DEFAULT -> [{"instanceId":"192.168.50.112#9301#DEFAULT#DEFAULT_GROUP@@test-center","ip":"192.168.50.112","port":9301,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@test-center","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatTimeOut":15000,"instanceHeartBeatInterval":5000}]
2022-01-07 19:56:24,443 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_5
2022-01-07 19:56:24,577 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_8
2022-01-07 19:56:24,592 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: specialPrintUsingPOST_1
2022-01-07 19:56:24,592 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: updatePicUsingPOST_1
2022-01-07 19:56:24,608 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_6
2022-01-07 19:56:24,702 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_9
2022-01-07 19:56:24,717 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: verifyBarcodeOrSampleNoUsingGET_1
2022-01-07 19:56:24,733 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: isHengOrShuUsingGET_1
2022-01-07 19:56:24,733 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_10
2022-01-07 19:56:24,733 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: verifyBarcodeOrSampleNoUsingGET_2
2022-01-07 19:56:24,749 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_11
2022-01-07 19:56:24,782 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_12
2022-01-07 19:56:24,798 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_7
2022-01-07 19:56:24,829 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: findListUsingGET_1
2022-01-07 19:56:24,845 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: setDensityUsingPOST_1
2022-01-07 19:56:24,860 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveUsingPOST_1
2022-01-07 19:56:24,923 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: findAllUsingGET_1
2022-01-07 19:56:24,923 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveUsingPOST_2
2022-01-07 19:56:25,002 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_13
2022-01-07 19:56:25,066 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_14
2022-01-07 19:56:25,066 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: deleteUsingPOST_3
2022-01-07 19:56:25,066 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: findAllUsingGET_2
2022-01-07 19:56:25,129 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_15
2022-01-07 19:56:25,129 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveUsingPOST_3
2022-01-07 19:56:25,189 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: addUsingPOST_1
2022-01-07 19:56:25,220 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: taskTraceExportUsingGET_1
2022-01-07 19:56:25,251 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveUsingPOST_4
2022-01-07 19:56:25,251 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveFlagUsingPOST_1
2022-01-07 19:56:25,283 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_16
2022-01-07 19:56:25,283 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveUsingPOST_5
2022-01-07 19:56:25,366 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: listUsingGET_17
2022-01-07 19:56:25,366 WARN  restartedMain ParameterDataTypeReader Trying to infer dataType java.util.List<java.lang.Long>
2022-01-07 19:56:25,438 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: batchSaveUsingPOST_8
2022-01-07 19:56:25,496 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: itemListUsingGET_1
2022-01-07 19:56:25,563 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: pageUsingGET_1
2022-01-07 19:56:25,600 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: reportListUsingGET_1
2022-01-07 19:56:25,603 INFO  restartedMain CachingOperationNameGenerator Generating unique operation named: saveUsingPOST_6
2022-01-07 19:56:25,655 INFO  restartedMain TestCenterApplication Started TestCenterApplication in 48.917 seconds (JVM running for 51.229)
2022-01-07 19:56:25,671 INFO  restartedMain ClientWorker [fixed-10.0.14.131_8848-jianjiang] [subscribe] test-center-dev.yml+DEFAULT_GROUP+jianjiang
2022-01-07 19:56:25,671 INFO  restartedMain CacheData [fixed-10.0.14.131_8848-jianjiang] [add-listener] ok, tenant=jianjiang, dataId=test-center-dev.yml, group=DEFAULT_GROUP, cnt=1
2022-01-07 19:56:25,671 INFO  restartedMain ClientWorker [fixed-10.0.14.131_8848-jianjiang] [subscribe] test-center+DEFAULT_GROUP+jianjiang
2022-01-07 19:56:25,671 INFO  restartedMain CacheData [fixed-10.0.14.131_8848-jianjiang] [add-listener] ok, tenant=jianjiang, dataId=test-center, group=DEFAULT_GROUP, cnt=1
2022-01-07 19:56:25,671 INFO  restartedMain ClientWorker [fixed-10.0.14.131_8848-jianjiang] [subscribe] test-center.yml+DEFAULT_GROUP+jianjiang
2022-01-07 19:56:25,671 INFO  restartedMain CacheData [fixed-10.0.14.131_8848-jianjiang] [add-listener] ok, tenant=jianjiang, dataId=test-center.yml, group=DEFAULT_GROUP, cnt=1
2022-01-07 19:56:25,953 INFO  restartedMain ChainedDynamicProperty Flipping property: sample-center.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2022-01-07 19:56:25,969 INFO  restartedMain BaseLoadBalancer Client: sample-center instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=sample-center,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2022-01-07 19:56:25,984 INFO  restartedMain DynamicServerListLoadBalancer Using serverListUpdater PollingServerListUpdater
2022-01-07 19:56:26,015 INFO  restartedMain DynamicServerListLoadBalancer DynamicServerListLoadBalancer for client sample-center initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=sample-center,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@911e8ad
2022-01-07 19:56:41,161 INFO  com.alibaba.nacos.client.naming.updater naming new ips(1) service: DEFAULT_GROUP@@sample-center -> [{"instanceId":"192.168.50.112#8090#DEFAULT#DEFAULT_GROUP@@sample-center","ip":"192.168.50.112","port":8090,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@sample-center","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatTimeOut":15000,"instanceHeartBeatInterval":5000}]
2022-01-07 19:56:41,211 INFO  com.alibaba.nacos.client.naming.updater naming current ips:(1) service: DEFAULT_GROUP@@sample-center -> [{"instanceId":"192.168.50.112#8090#DEFAULT#DEFAULT_GROUP@@sample-center","ip":"192.168.50.112","port":8090,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@sample-center","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatTimeOut":15000,"instanceHeartBeatInterval":5000}]
2022-01-07 19:56:57,046 INFO  PollingServerListUpdater-0 ChainedDynamicProperty Flipping property: sample-center.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2022-01-07 19:58:21,340 INFO  http-nio-9301-exec-1 [/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-01-07 19:58:21,340 INFO  http-nio-9301-exec-1 DispatcherServlet Initializing Servlet 'dispatcherServlet'
2022-01-07 19:58:21,425 INFO  http-nio-9301-exec-1 DispatcherServlet Completed initialization in 85 ms
2022-01-07 19:58:24,597 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample_COUNT ==>  Preparing: SELECT count(0) FROM t_test_task WHERE ((org_code = ? AND test_date BETWEEN ? AND ? AND lab_group_code = ?))
2022-01-07 19:58:24,644 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample_COUNT ==> Parameters: 1025(String), 2021-11-11 00:00:00.0(Timestamp), 2022-01-06 00:00:00.0(Timestamp), 0004(String)
2022-01-07 19:58:25,913 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT count(0) FROM t_test_task WHERE ((org_code = ? AND test_date BETWEEN ? AND ? AND lab_group_code = ?))
2022-01-07 19:58:25,913 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@104df375, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7f33d934), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7f33d934, projectionsContext=ProjectionsContext(startIndex=7, stopIndex=14, distinctRow=false, projections=[AggregationProjection(type=COUNT, innerExpression=(0), alias=Optional.empty, derivedAggregationProjections=[], index=-1)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@22c6d4d9, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@72b14cdd, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@d98dfa5, containsSubquery=false)
2022-01-07 19:58:25,913 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT count(0) FROM t_test_task_1025 WHERE ((org_code = ? AND test_date BETWEEN ? AND ? AND lab_group_code = ?)) ::: [1025, 2021-11-11T00:00:00.000+0900, 2022-01-06T00:00:00.000+0900, 0004]
2022-01-07 19:58:26,048 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample_COUNT <==      Total: 1
2022-01-07 19:58:26,048 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , creator_name , barcode , lab_group_code , sample_no , org_code , create_time FROM t_test_task WHERE ( ( org_code = ? and test_date between ? and ? and lab_group_code = ? ) ) LIMIT ?
2022-01-07 19:58:26,048 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 1025(String), 2021-11-11 00:00:00.0(Timestamp), 2022-01-06 00:00:00.0(Timestamp), 0004(String), 50(Integer)
2022-01-07 19:58:26,072 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , creator_name , barcode , lab_group_code , sample_no , org_code , create_time  FROM t_test_task  WHERE (       (  org_code = ?



              and test_date between ? and ?



              and lab_group_code = ? ) )
 LIMIT ?
2022-01-07 19:58:26,072 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@1d542515, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@345d88f6), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@345d88f6, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=89, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=creator_name, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=lab_group_code, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=org_code, alias=Optional.empty), ColumnProjection(owner=null, name=create_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7e94e053, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@171b0367, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2bdbf01c, containsSubquery=false)
2022-01-07 19:58:26,072 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , creator_name , barcode , lab_group_code , sample_no , org_code , create_time  FROM t_test_task_1025  WHERE (       (  org_code = ?



              and test_date between ? and ?



              and lab_group_code = ? ) )
 LIMIT ?  ::: [1025, 2021-11-11T00:00:00.000+0900, 2022-01-06T00:00:00.000+0900, 0004, 50]
2022-01-07 19:58:26,096 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 50
2022-01-07 19:58:26,112 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,112 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 1025(String), 921119121981(String), 0004(String), 3010(Integer), 1(String)
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 1025(String), 921119121994(String), 0004(String), 3022(Integer), 1(String)
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921119101289(String), 0004(String), 2002(Integer), 1(String)
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121990(String), 0004(String), 3018(Integer), 1(String)
2022-01-07 19:58:26,112 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 1025(String), 921119121977(String), 0004(String), 3006(Integer), 1(String)
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 921119101281(String), 0004(String), 1003(Integer), 1(String)
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 1025(String), 921119121998(String), 0004(String), 3026(Integer), 1(String)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,127 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@346f3a05, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3aa8c2f8), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3aa8c2f8, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3e975175, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7b95c8c3, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@36677aa6, containsSubquery=false)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121998, 0004, 3026, 1]
2022-01-07 19:58:26,127 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@346f3a05, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1f00421e), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1f00421e, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3b2f0b70, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3d245388, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4f1a822a, containsSubquery=false)
2022-01-07 19:58:26,127 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121981, 0004, 3010, 1]
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,127 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 921319239908(String), 0004(String), 100009(Integer), 1(String)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@346f3a05, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@252d7e3a), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@252d7e3a, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2bea84ef, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@2fd5154a, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6ad78ed4, containsSubquery=false)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239908, 0004, 100009, 1]
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@39ccabd7, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3ed96e92), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3ed96e92, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4c6c6c67, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3d6fe1ee, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@61a16787, containsSubquery=false)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121990, 0004, 3018, 1]
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@4809b312, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@e4af345), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@e4af345, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@28fea85, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@5619a0a3, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@530d1851, containsSubquery=false)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101281, 0004, 1003, 1]
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@13250572), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@13250572, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7c1a651b, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@56df66da, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@13e0405a, containsSubquery=false)
2022-01-07 19:58:26,127 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121977, 0004, 3006, 1]
2022-01-07 19:58:26,143 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,143 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20d01c74, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@24eae40d), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@24eae40d, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@f13d2c1, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@b2f10f8, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2b3c8e55, containsSubquery=false)
2022-01-07 19:58:26,143 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,143 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101289, 0004, 2002, 1]
2022-01-07 19:58:26,143 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@6261d0de, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@12c9e3c), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@12c9e3c, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@50f9b74b, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6af0cec3, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6fb1463, containsSubquery=false)
2022-01-07 19:58:26,143 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121994, 0004, 3022, 1]
2022-01-07 19:58:26,143 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 3
2022-01-07 19:58:26,143 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 3
2022-01-07 19:58:26,143 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,143 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 921119121998(String), 3026(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,161 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 1
2022-01-07 19:58:26,161 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,161 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 921119121981(String), 3010(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,161 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,161 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 921319239908(String), 100009(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,161 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,161 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,161 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121990(String), 3018(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,176 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 1
2022-01-07 19:58:26,176 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 3
2022-01-07 19:58:26,176 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,176 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 921119101281(String), 1003(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 921119121977(String), 3006(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 1
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921119101289(String), 2002(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 3
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@742d8994, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@311dac42), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@311dac42, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2de61da6, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@59977370, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@416e30ff, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@42dab943, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2f1d727f), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2f1d727f, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3b77cc7e, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3364080e, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@24e3bf80, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101281, 1003, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121990, 3018, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,192 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 921119121994(String), 3022(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@145d7bbd, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6201df), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6201df, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@73c5df54, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@dc14955, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@723e4bc3, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239908, 100009, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5fd0beb5, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@341fa5ef), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@341fa5ef, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@311fbd9, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@58b5788d, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2ca4038, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121994, 3022, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@742d8994, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@73f74dde), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@73f74dde, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@363d8c21, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@408e3c0a, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6db498c, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@2cb6f0a, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6498e077), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6498e077, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@6e121f20, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3ed9b464, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@67b32f8a, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101289, 2002, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121977, 3006, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@40735a23), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@40735a23, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@6dc070f5, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@59804c40, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@79c629a9, containsSubquery=false)
2022-01-07 19:58:26,192 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121981, 3010, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5fd0beb5, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3ac8aa08), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3ac8aa08, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@21b56216, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1e1ff681, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@648233ea, containsSubquery=false)
2022-01-07 19:58:26,192 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121998, 3026, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,208 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,208 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 921119101285(String), 0004(String), 1005(Integer), 1(String)
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121992(String), 0004(String), 3020(Integer), 1(String)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@29108ae4), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@29108ae4, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@ab329e6, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@68fbd769, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4a2e9467, containsSubquery=false)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4d74363b), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4d74363b, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@50fed946, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@66663157, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@62cf1629, containsSubquery=false)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101285, 0004, 1005, 1]
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121992, 0004, 3020, 1]
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 0
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 921319239990(String), 0004(String), 100001(Integer), 1(String)
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@384cd504), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@384cd504, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4cff457f, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@77820eb5, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@28fd49bd, containsSubquery=false)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239990, 0004, 100001, 1]
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 1025(String), 921119121995(String), 0004(String), 3023(Integer), 1(String)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@64696c9a), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@64696c9a, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@32669c71, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@77150cd2, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@524fbc5d, containsSubquery=false)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121995, 0004, 3023, 1]
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,223 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 1025(String), 921119121979(String), 0004(String), 3008(Integer), 1(String)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@37a64c89), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@37a64c89, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2cb42b56, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@66073359, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@10cc8752, containsSubquery=false)
2022-01-07 19:58:26,223 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121979, 0004, 3008, 1]
2022-01-07 19:58:26,240 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 0
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,240 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,240 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 1025(String), 921119121983(String), 0004(String), 3011(Integer), 1(String)
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921119101290(String), 0004(String), 2003(Integer), 1(String)
2022-01-07 19:58:26,240 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@23eb3ca8), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@23eb3ca8, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@e1dd6e7, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@137b4b02, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2cc378d7, containsSubquery=false)
2022-01-07 19:58:26,240 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3f72566d), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3f72566d, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@90037f1, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@780ccef1, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@76de8c51, containsSubquery=false)
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101290, 0004, 2003, 1]
2022-01-07 19:58:26,240 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121983, 0004, 3011, 1]
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 1025(String), 921119121999(String), 0004(String), 3027(Integer), 1(String)
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@71305fe), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@71305fe, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4249ec85, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@76ffd4a9, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1b37e934, containsSubquery=false)
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121999, 0004, 3027, 1]
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 1
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 921119101285(String), 1005(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7c6e7198), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7c6e7198, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@38eda979, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@10a50fde, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@3890184a, containsSubquery=false)
2022-01-07 19:58:26,240 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101285, 1005, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,240 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121992(String), 3020(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@652bb288), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@652bb288, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@5aff5c91, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@556a80d5, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@56ce9053, containsSubquery=false)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121992, 3020, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 921319239990(String), 100001(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@654776a4), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@654776a4, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@29a6029a, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@40b89205, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4c1b36df, containsSubquery=false)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239990, 100001, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 3
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 3
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 921119121979(String), 3008(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 921119121995(String), 3023(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@b409448), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@b409448, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1e015695, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@112fbd66, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@261482ab, containsSubquery=false)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121995, 3023, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@33a8a8a5), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@33a8a8a5, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7cf2c875, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@25e66ea5, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@305131e5, containsSubquery=false)
2022-01-07 19:58:26,256 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121979, 3008, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,256 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 1
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921119101290(String), 2003(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@48a5f527), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@48a5f527, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2680f07f, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7a2b628a, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@3c84bb32, containsSubquery=false)
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101290, 2003, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,271 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 3
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 3
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 921119121999(String), 3027(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2fd831df), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2fd831df, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1e63fb68, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@5a4de886, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@60be8931, containsSubquery=false)
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121999, 3027, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,271 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,271 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 921119121983(String), 3011(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,271 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,271 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@26415223), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@26415223, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@20bdbfe1, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1c29de61, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@b4572ea, containsSubquery=false)
2022-01-07 19:58:26,271 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121983, 3011, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,271 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 921119101282(String), 0004(String), 1004(Integer), 1(String)
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6207b4b9), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6207b4b9, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3fc4e24c, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@29b0aa0f, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1e45685a, containsSubquery=false)
2022-01-07 19:58:26,271 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101282, 0004, 1004, 1]
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121991(String), 0004(String), 3019(Integer), 1(String)
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 921319239909(String), 0004(String), 100010(Integer), 1(String)
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6d7105e7), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6d7105e7, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4da7a9fe, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@13a00c43, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@26c8e348, containsSubquery=false)
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121991, 0004, 3019, 1]
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1a08188b), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1a08188b, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@34cc0a8f, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@5871a45f, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@541ed6b7, containsSubquery=false)
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239909, 0004, 100010, 1]
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 0
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 1025(String), 921119121993(String), 0004(String), 3021(Integer), 1(String)
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@537361ae), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@537361ae, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@37e91d3d, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@4dbe4017, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@199d9669, containsSubquery=false)
2022-01-07 19:58:26,287 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121993, 0004, 3021, 1]
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,287 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921119101288(String), 0004(String), 2001(Integer), 1(String)
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 1025(String), 921119121978(String), 0004(String), 3007(Integer), 1(String)
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@421712d0), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@421712d0, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@6232b2e7, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7384640e, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@336ab3ba, containsSubquery=false)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@37393c9), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@37393c9, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@177b8577, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@37d2bdad, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2f454f4b, containsSubquery=false)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101288, 0004, 2001, 1]
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121978, 0004, 3007, 1]
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 1025(String), 921119121997(String), 0004(String), 3025(Integer), 1(String)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2ee029ea), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2ee029ea, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1089e19c, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@67809d3e, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@43e3dedc, containsSubquery=false)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121997, 0004, 3025, 1]
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 1
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,303 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 0
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 1
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 921119101282(String), 1004(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@40887118), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@40887118, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@441ee643, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@2a4b5cf7, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@9d059cb, containsSubquery=false)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101282, 1004, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121991(String), 3019(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@41099854), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@41099854, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1e071df2, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@746aa40d, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@3cac015, containsSubquery=false)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121991, 3019, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,303 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,303 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 1025(String), 921119121980(String), 0004(String), 3009(Integer), 1(String)
2022-01-07 19:58:26,303 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 921319239909(String), 100010(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,303 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,303 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@184cee64), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@184cee64, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@70523a37, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@2a7c08bf, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@62c72f9a, containsSubquery=false)
2022-01-07 19:58:26,303 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121980, 0004, 3009, 1]
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2d4b7ba9), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2d4b7ba9, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@6108c947, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1eed6c16, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4c9bebc, containsSubquery=false)
2022-01-07 19:58:26,303 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239909, 100010, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 1
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 3
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921119101288(String), 2001(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@8a6be07), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@8a6be07, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4cc78498, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6e20981a, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@3978eda1, containsSubquery=false)
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101288, 2001, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 3
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 921119121993(String), 3021(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 999078208764(String), 0004(String), 1(Integer), 1(String)
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,318 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 921119121978(String), 3007(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@648ea4a0), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@648ea4a0, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@6afc9606, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@640eb204, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@5f51f406, containsSubquery=false)
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4285637d), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4285637d, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@57894b5c, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@f481a50, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@453e7af1, containsSubquery=false)
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 999078208764, 0004, 1, 1]
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121993, 3021, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5c0bc19a), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5c0bc19a, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@57d27c5e, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@4cda1a36, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1a2a47bf, containsSubquery=false)
2022-01-07 19:58:26,318 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121978, 3007, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 3
2022-01-07 19:58:26,334 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 3
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,334 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,334 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample ==> Parameters: 921119121980(String), 3009(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121988(String), 0004(String), 3016(Integer), 1(String)
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5cb6772f), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5cb6772f, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@334d4b8a, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@988857a, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4e45f240, containsSubquery=false)
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121988, 0004, 3016, 1]
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 921119121997(String), 3025(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,334 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@d7bbae2), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@d7bbae2, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@796d51e6, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6622770, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4a45f701, containsSubquery=false)
2022-01-07 19:58:26,334 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6df65409), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6df65409, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4ec15f4d, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1cf588c0, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1ad04e96, containsSubquery=false)
2022-01-07 19:58:26,334 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121980, 3009, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121997, 3025, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,334 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 921319239906(String), 0004(String), 100007(Integer), 1(String)
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@69c18bcb), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@69c18bcb, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@530f11bf, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@63c1a354, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@641b7796, containsSubquery=false)
2022-01-07 19:58:26,334 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239906, 0004, 100007, 1]
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 0
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 1
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 999078208764(String), 1(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 1025(String), 921119121985(String), 0004(String), 3013(Integer), 1(String)
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@480d18ed), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@480d18ed, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2f9e823b, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@26463cec, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@481bb7ac, containsSubquery=false)
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [999078208764, 1, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@18728f0), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@18728f0, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@10fa7498, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1847f829, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@79384210, containsSubquery=false)
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121985, 0004, 3013, 1]
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921119101292(String), 0004(String), 2005(Integer), 1(String)
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 1025(String), 921119121975(String), 0004(String), 3004(Integer), 1(String)
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@60e1c816), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@60e1c816, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7dbf5547, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@da525b4, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@423c5130, containsSubquery=false)
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101292, 0004, 2005, 1]
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@893e7b8), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@893e7b8, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@6a4d1001, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6978e6b3, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4babd562, containsSubquery=false)
2022-01-07 19:58:26,349 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121975, 0004, 3004, 1]
2022-01-07 19:58:26,349 DEBUG b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 selectByExample <==      Total: 0
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,349 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 1025(String), 921119121996(String), 0004(String), 3024(Integer), 1(String)
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121988(String), 3016(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 1
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@54b52f3d), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@54b52f3d, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@5a43f6a8, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@4d1135e0, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@60deba99, containsSubquery=false)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121988, 3016, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7b1e8611), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7b1e8611, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2eb21083, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6476eb74, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4ee3a7aa, containsSubquery=false)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121996, 0004, 3024, 1]
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 921319239906(String), 100007(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7be5e9b7), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7be5e9b7, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@73b47099, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1bf7216c, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@33a98d22, containsSubquery=false)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239906, 100007, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 1
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 3
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 921119101280(String), 0004(String), 1002(Integer), 1(String)
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921119101292(String), 2005(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 921119121985(String), 3013(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2f5880f8), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2f5880f8, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1f1bae42, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3bb33419, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@5bb124fa, containsSubquery=false)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@31204260), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@31204260, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@511080e2, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@4c4a69b9, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@7158b046, containsSubquery=false)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1e6f0fd4), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1e6f0fd4, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@5ec4ba2b, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@32ce4897, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@70fd164e, containsSubquery=false)
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101280, 0004, 1002, 1]
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101292, 2005, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,365 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121985, 3013, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,365 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121989(String), 0004(String), 3017(Integer), 1(String)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@9b9056a), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@9b9056a, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@695ded48, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@56c87c8e, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@79b1f694, containsSubquery=false)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121989, 0004, 3017, 1]
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 3
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 3
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 921119121975(String), 3004(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 921119121996(String), 3024(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 1
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@65ab78b5), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@65ab78b5, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2bdbdf9d, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@19ec5ce6, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1c4fe245, containsSubquery=false)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121975, 3004, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 921119101280(String), 1002(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921319239904(String), 0004(String), 100003(Integer), 1(String)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,381 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 921319239907(String), 0004(String), 100008(Integer), 1(String)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7fb9fdd7), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7fb9fdd7, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2a5d958f, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7b6476, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@a4df9d4, containsSubquery=false)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121996, 3024, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3cecaf5b), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3cecaf5b, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@384abd2e, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7d16c3a1, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@62afe692, containsSubquery=false)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@25b6875), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@25b6875, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1b467c8a, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1e63fe1b, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@3657a1ef, containsSubquery=false)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101280, 1002, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239904, 0004, 100003, 1]
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6a5402a3), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6a5402a3, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2658b5a2, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3ec601b5, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@718f4599, containsSubquery=false)
2022-01-07 19:58:26,381 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239907, 0004, 100008, 1]
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 0
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121989(String), 3017(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 1025(String), 921119121986(String), 0004(String), 3014(Integer), 1(String)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5d99c283), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5d99c283, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7426197b, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@574d4c08, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@28f96939, containsSubquery=false)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121989, 3017, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@35f91874), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@35f91874, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7601c307, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@39b36336, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@65e61195, containsSubquery=false)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121986, 0004, 3014, 1]
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 1
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 999078208764(String), 0004(String), 6(Integer), 1(String)
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@684682), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@684682, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3b6c2a27, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1ef4d2ec, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@76b40909, containsSubquery=false)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 999078208764, 0004, 6, 1]
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921319239904(String), 100003(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 1025(String), 921119121976(String), 0004(String), 3005(Integer), 1(String)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4dddd8fd), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4dddd8fd, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@11eb5439, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@31b1708c, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@583f121, containsSubquery=false)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239904, 100003, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4f83b42b), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4f83b42b, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@17b9d875, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@2a138689, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6fda31c6, containsSubquery=false)
2022-01-07 19:58:26,396 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121976, 0004, 3005, 1]
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,396 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 1
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 1025(String), 921119121984(String), 0004(String), 3012(Integer), 1(String)
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@42f8bc77), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@42f8bc77, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2fef4cb5, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3c68fcd1, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@68b2cfff, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121984, 0004, 3012, 1]
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 921319239907(String), 100008(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5d7f0ab6), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5d7f0ab6, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@46609d80, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@c83cbdd, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6348904b, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239907, 100008, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 1
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 3
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 999078208764(String), 6(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121987(String), 0004(String), 3015(Integer), 1(String)
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 921119121986(String), 3014(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3c4fb6), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3c4fb6, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@649a58ef, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@63f5c02b, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2c38361, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@218d3787), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@218d3787, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2333dc1a, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@2cf7db8d, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1f687cc9, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121987, 0004, 3015, 1]
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [999078208764, 6, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@17f7d095), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@17f7d095, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3bdab39, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@606e9dd5, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@62fb9d23, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121986, 3014, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 3
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921119101291(String), 0004(String), 2004(Integer), 1(String)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4da4d82b), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4da4d82b, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3d340af8, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@8f31689, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@7eb9a29b, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119101291, 0004, 2004, 1]
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 921119121976(String), 3005(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6c724508), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6c724508, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@625c74e, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@2dfd8b6f, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@3fa32826, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121976, 3005, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,412 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 921319239905(String), 0004(String), 100004(Integer), 1(String)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@31abfbcf), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@31abfbcf, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4ff3a7a8, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@399c560, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2222944c, containsSubquery=false)
2022-01-07 19:58:26,412 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921319239905, 0004, 100004, 1]
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 3
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 921119121984(String), 3012(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 921119121970(String), 0004(String), 3000(Integer), 1(String)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3f37b12d), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@3f37b12d, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@266cf95c, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@115bb3e1, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@72225074, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5f46a5d), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@5f46a5d, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@649edc3e, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@687ceada, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6292a126, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121970, 0004, 3000, 1]
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121984, 3012, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 0
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 1
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 1025(String), 921119121974(String), 0004(String), 3003(Integer), 1(String)
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921119101291(String), 2004(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121987(String), 3015(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@f13346b), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@f13346b, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4821c21a, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3552394d, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@798ecaf8, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121974, 0004, 3003, 1]
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 1
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2414a4cc), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2414a4cc, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@79d51dd3, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6f9e0be5, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@271900f6, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121987, 3015, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2b003f4f), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2b003f4f, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@45f3aa8, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@434a83bb, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2c66cb7c, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119101291, 2004, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 1025(String), 178109876520(String), 0004(String), 1(Integer), 1(String)
2022-01-07 19:58:26,428 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 921319239905(String), 100004(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@e936798), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@e936798, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@74e86f1d, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@1bb73176, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@fb15854, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 178109876520, 0004, 1, 1]
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@65ec4c2e), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@65ec4c2e, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@62608d81, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@5645a667, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@548aab18, containsSubquery=false)
2022-01-07 19:58:26,428 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921319239905, 100004, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 3
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 3
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 1025(String), 123456789999(String), 0004(String), 1(Integer), 1(String)
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample ==> Parameters: 921119121974(String), 3003(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 921119121970(String), 3000(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 1025(String), 921119121973(String), 0004(String), 3002(Integer), 1(String)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2e36c988), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@2e36c988, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7eb95234, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@56ffb9d2, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@596ad171, containsSubquery=false)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121970, 3000, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@235394a), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@235394a, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@2dfc36ab, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7d4afa98, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@6fe385fe, containsSubquery=false)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-3 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121974, 3003, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7ef07f5), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@7ef07f5, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@7624271f, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3d5156d, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1ef38a03, containsSubquery=false)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121973, 0004, 3002, 1]
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1db0afdd), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1db0afdd, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1c61f5a6, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@61a15320, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@132d782a, containsSubquery=false)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 123456789999, 0004, 1, 1]
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,443 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 1025(String), 921119121971(String), 0004(String), 3001(Integer), 1(String)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@76a69ba3), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@76a69ba3, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@433a1f2c, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@3413aa54, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@54710e92, containsSubquery=false)
2022-01-07 19:58:26,443 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 921119121971, 0004, 3001, 1]
2022-01-07 19:58:26,460 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,460 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,461 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,461 DEBUG  ForkJoinPool.commonPool-worker-3 selectByExample <==      Total: 0
2022-01-07 19:58:26,461 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 3
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample ==> Parameters: 178109876520(String), 1(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , item_code , barcode , sample_no FROM t_test_result WHERE ( ( org_code = ? and barcode = ? and lab_group_code = ? and sample_no = ? and is_valid = ? ) )
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 1025(String), 111555444222(String), 0004(String), 101(Integer), 1(String)
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 1025(String), 179029876289(String), 0004(String), 2(Integer), 1(String)
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,463 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample ==> Parameters: 921119121973(String), 3002(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@a44775e), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@a44775e, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@4a835822, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@54ab2c1, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1d082521, containsSubquery=false)
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-15 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [178109876520, 1, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) )
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@51605e0a), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@51605e0a, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@5122c7ba, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@339bf0f, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2af1abfe, containsSubquery=false)
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@348e2e9d, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4f34cd14), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@4f34cd14, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=44, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=item_code, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@1ce318a1, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7df79529, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@888a599, containsSubquery=false)
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 111555444222, 0004, 101, 1]
2022-01-07 19:58:26,463 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , item_code , barcode , sample_no  FROM t_test_result_1025  WHERE (       (  org_code = ?



              and barcode = ?



              and lab_group_code = ?



              and sample_no = ?



              and is_valid = ? ) ) ::: [1025, 179029876289, 0004, 2, 1]
2022-01-07 19:58:26,464 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,464 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1f631e97), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@1f631e97, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@190d2b22, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@165e2db6, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@1af5541f, containsSubquery=false)
2022-01-07 19:58:26,464 INFO  ForkJoinPool.commonPool-worker-9 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121973, 3002, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 3
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample ==> Parameters: 921119121971(String), 3001(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-15 selectByExample <==      Total: 0
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@702997d9), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@702997d9, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@21d13cfc, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@669bd712, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@4a8d30db, containsSubquery=false)
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-7 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [921119121971, 3001, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-9 selectByExample <==      Total: 0
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==>  Preparing: SELECT ID , process_type , barcode , sample_no , processor , process_time FROM t_test_task_process_record WHERE ( ( barcode = ? and sample_no = ? and org_code = ? and is_valid = ? and lab_group_code = ? and process_type in ( ? , ? ) ) )
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample ==> Parameters: 111555444222(String), 101(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample ==> Parameters: 123456789999(String), 1(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,466 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample ==> Parameters: 179029876289(String), 2(Integer), 1025(String), 1(String), 0004(String), 10(String), 5(String)
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@57ecdd83), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@57ecdd83, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@3fb3e0ca, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@508f7bdc, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@9024301, containsSubquery=false)
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-11 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [111555444222, 101, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@be349c2), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@be349c2, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@5f52f630, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@6017a420, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@2fb2317f, containsSubquery=false)
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-13 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [123456789999, 1, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Logic SQL: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) )
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL SQLStatement: SelectStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@20e010c1, tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6969fd44), tablesContext=org.apache.shardingsphere.sql.parser.binder.segment.table.TablesContext@6969fd44, projectionsContext=ProjectionsContext(startIndex=9, stopIndex=74, distinctRow=false, projections=[ColumnProjection(owner=null, name=ID, alias=Optional.empty), ColumnProjection(owner=null, name=process_type, alias=Optional.empty), ColumnProjection(owner=null, name=barcode, alias=Optional.empty), ColumnProjection(owner=null, name=sample_no, alias=Optional.empty), ColumnProjection(owner=null, name=processor, alias=Optional.empty), ColumnProjection(owner=null, name=process_time, alias=Optional.empty)]), groupByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.groupby.GroupByContext@64f67f95, orderByContext=org.apache.shardingsphere.sql.parser.binder.segment.select.orderby.OrderByContext@7c0a906b, paginationContext=org.apache.shardingsphere.sql.parser.binder.segment.select.pagination.PaginationContext@59aebe6a, containsSubquery=false)
2022-01-07 19:58:26,466 INFO  ForkJoinPool.commonPool-worker-5 ShardingSphere-SQL Actual SQL: test-center ::: SELECT   ID , process_type , barcode , sample_no , processor , process_time  FROM t_test_task_process_record_1025  WHERE (       (  barcode = ?



              and sample_no = ?



              and org_code = ?



              and is_valid = ?



              and lab_group_code = ?



              and process_type in
              (
                ?
              ,
                ?
              ) ) ) ::: [179029876289, 2, 1025, 1, 0004, 10, 5]
2022-01-07 19:58:26,482 DEBUG  ForkJoinPool.commonPool-worker-5 selectByExample <==      Total: 0
2022-01-07 19:58:26,482 DEBUG  ForkJoinPool.commonPool-worker-11 selectByExample <==      Total: 0
2022-01-07 19:58:26,482 DEBUG  ForkJoinPool.commonPool-worker-7 selectByExample <==      Total: 0
2022-01-07 19:58:26,482 DEBUG  ForkJoinPool.commonPool-worker-13 selectByExample <==      Total: 0
2022-01-07 19:58:26,482 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging uri:/testResult/lis/queryItemsByTimeRangeAndLab
2022-01-07 19:58:26,482 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging processor:PageResult com.adicon.test.controller.task.TestTaskQuZhouController.queryItemsByTimeRangeAndLab(TimeRangeAndGroupCode)
2022-01-07 19:58:26,482 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging operator:null/null
2022-01-07 19:58:26,482 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging header:{"x-org-code":["1025"],"user-agent":["Apache-HttpClient/4.5.12 (Java/11.0.6)"]}
2022-01-07 19:58:26,482 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging token:null
2022-01-07 19:58:26,482 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging queryString:
2022-01-07 19:58:26,498 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging queryBody:{"param":{"page":1,"limit":50,"startDate":"2021-11-11 00:00:00.000","endDate":"2022-01-06 00:00:00.000","labGroupCode":"0004"}}
2022-01-07 19:58:26,498 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging response:{"code":"success","subCode":200,"data":[{"barcode":"999078208764","sampleNo":6,"sourceItems":[{"itemCode":"FT3-B","flag":"2"}],"currentItems":[{"itemCode":"FT3-B","flag":"2"}],"reviseTime":"2021-12-20 06:05:03"},{"barcode":"999078208764","sampleNo":1,"sourceItems":[{"itemCode":"FT3-B","flag":"2"}],"currentItems":[{"itemCode":"FT3-B","flag":"2"}],"reviseTime":"2021-12-20 06:16:37"},{"barcode":"921119101280","sampleNo":1002,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 07:26:53"},{"barcode":"921119101281","sampleNo":1003,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 07:26:53"},{"barcode":"921119101282","sampleNo":1004,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 07:26:53"},{"barcode":"921119101285","sampleNo":1005,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 07:26:53"},{"barcode":"921119101288","sampleNo":2001,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 09:27:09"},{"barcode":"921119101289","sampleNo":2002,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 09:27:09"},{"barcode":"921119101290","sampleNo":2003,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 09:27:09"},{"barcode":"921119101291","sampleNo":2004,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 09:27:09"},{"barcode":"921119101292","sampleNo":2005,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 09:27:09"},{"barcode":"921319239904","sampleNo":100003,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 10:50:11"},{"barcode":"921319239905","sampleNo":100004,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 11:13:06"},{"barcode":"921319239906","sampleNo":100007,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 11:14:30"},{"barcode":"921319239907","sampleNo":100008,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 11:15:29"},{"barcode":"921319239908","sampleNo":100009,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 11:23:27"},{"barcode":"921319239909","sampleNo":100010,"sourceItems":[{"itemCode":"XG-RNA","flag":"2"}],"currentItems":[{"itemCode":"XG-RNA","flag":"2"}],"reviseTime":"2021-12-20 11:23:27"},{"barcode":"921319239990","sampleNo":100001,"reviseTime":"2021-12-20 12:26:34"},{"barcode":"123456789999","sampleNo":1,"reviseTime":"2021-12-20 12:26:34"},{"barcode":"178109876520","sampleNo":1,"reviseTime":"2021-12-21 01:30:21"},{"barcode":"179029876289","sampleNo":2,"reviseTime":"2021-12-21 01:30:21"},{"barcode":"111555444222","sampleNo":101,"reviseTime":"2021-12-21 01:53:17"},{"barcode":"921119121970","sampleNo":3000,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:15","operator":"陈瑶"},{"barcode":"921119121971","sampleNo":3001,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:16","operator":"陈瑶"},{"barcode":"921119121973","sampleNo":3002,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:18","operator":"陈瑶"},{"barcode":"921119121974","sampleNo":3003,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:20","operator":"陈瑶"},{"barcode":"921119121975","sampleNo":3004,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:21","operator":"陈瑶"},{"barcode":"921119121976","sampleNo":3005,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:22","operator":"陈瑶"},{"barcode":"921119121977","sampleNo":3006,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:24","operator":"陈瑶"},{"barcode":"921119121978","sampleNo":3007,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:25","operator":"陈瑶"},{"barcode":"921119121979","sampleNo":3008,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:26","operator":"陈瑶"},{"barcode":"921119121980","sampleNo":3009,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:28","operator":"陈瑶"},{"barcode":"921119121981","sampleNo":3010,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:29","operator":"陈瑶"},{"barcode":"921119121983","sampleNo":3011,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:31","operator":"陈瑶"},{"barcode":"921119121984","sampleNo":3012,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:33","operator":"陈瑶"},{"barcode":"921119121985","sampleNo":3013,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:34","operator":"陈瑶"},{"barcode":"921119121986","sampleNo":3014,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:36","operator":"陈瑶"},{"barcode":"921119121987","sampleNo":3015,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:37","operator":"陈瑶"},{"barcode":"921119121988","sampleNo":3016,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:39","operator":"陈瑶"},{"barcode":"921119121989","sampleNo":3017,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:40","operator":"陈瑶"},{"barcode":"921119121990","sampleNo":3018,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:42","operator":"陈瑶"},{"barcode":"921119121991","sampleNo":3019,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:43","operator":"陈瑶"},{"barcode":"921119121992","sampleNo":3020,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:44","operator":"陈瑶"},{"barcode":"921119121993","sampleNo":3021,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:46","operator":"陈瑶"},{"barcode":"921119121994","sampleNo":3022,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:47","operator":"陈瑶"},{"barcode":"921119121995","sampleNo":3023,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:48","operator":"陈瑶"},{"barcode":"921119121996","sampleNo":3024,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:50","operator":"陈瑶"},{"barcode":"921119121997","sampleNo":3025,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:51","operator":"陈瑶"},{"barcode":"921119121998","sampleNo":3026,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:52","operator":"陈瑶"},{"barcode":"921119121999","sampleNo":3027,"sourceItems":[{"itemCode":"HCMV-DNA","flag":"2"},{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"}],"currentItems":[{"itemCode":"HCV-RNA","flag":"2"},{"itemCode":"HBV-DNA","flag":"2"},{"itemCode":"HCMV-DNA","flag":"2"}],"reviseTime":"2021-12-21 05:11:54","operator":"陈瑶"}],"total":1154,"pageNumber":1,"pageSize":50,"totalPages":24,"count":1154,"requestId":"b9a994bb6fa811ecb898e2d464e1e529"}
2022-01-07 19:58:26,498 INFO b9a994bb6fa811ecb898e2d464e1e529 http-nio-9301-exec-1 RequestLogging cost:2173ms
